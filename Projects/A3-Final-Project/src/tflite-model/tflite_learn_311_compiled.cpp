/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 21.10.2024 10:02:20

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1600;
#else
constexpr int kTensorArenaSize = 576;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,222 } };
const TfArray<1, float> quant0_scale = { 1, { 0.44792860746383667, } };
const TfArray<1, int> quant0_zero = { 1, { -119 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 64, -64, -27, 135, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const TfArray<1, float> quant1_scale = { 1, { 0.00013734139793086797, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const ALIGN(16) int8_t tensor_data2[4*20] = { 
  69, 66, 123, -42, 6, -101, -116, -23, 115, 57, 54, 0, -52, 103, 8, -103, -33, 56, -96, -8, 
  63, -23, -95, -111, -98, -95, 9, 33, -43, 12, 86, 20, 70, -21, 34, 48, 66, 22, 30, 117, 
  -93, 98, -76, -101, 76, -92, 104, 58, 67, -68, 40, 58, 8, 19, 48, 81, 107, -49, -113, 71, 
  17, -19, -8, 52, 42, -46, 92, -32, -98, -113, -17, 34, -114, -65, 95, 127, 22, -92, -97, 112, 
};
const TfArray<2, int> tensor_dimension2 = { 2, { 4,20 } };
const TfArray<1, float> quant2_scale = { 1, { 0.0041808499954640865, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[20] = { -50, -55, 27, 0, 34, 103, 11, -59, 12, -37, -95, -65, -81, -27, 13, 69, -106, -19, -46, 4, };
const TfArray<1, int> tensor_dimension3 = { 1, { 20 } };
const TfArray<1, float> quant3_scale = { 1, { 0.00025480287149548531, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[20*40] = { 
  39, -68, 97, 112, 0, 24, 58, 51, -8, -74, 88, 60, -113, 54, -68, 73, -105, 110, -32, 66, 55, -31, -1, 32, -5, -73, -20, -3, -2, -109, 71, -4, -31, -45, -74, -8, 98, 84, 41, -36, 
  -63, 68, 51, -59, -101, -54, 58, 70, -59, -46, 3, -104, 112, -77, -78, 107, -67, 16, -45, 66, 48, -10, -92, 82, 108, -109, -38, 15, 41, 75, 1, 68, 82, 92, 77, -112, 95, 25, -81, -22, 
  -16, -2, -52, -34, -41, 33, -17, -3, 72, -104, -55, -6, 122, -41, -7, 16, -36, 23, -34, -94, 87, 110, 95, -112, 108, -43, 102, 91, -59, 48, -111, 116, -21, 116, -105, -81, 17, 100, -40, -9, 
  61, 97, -69, -60, -29, 103, -76, -4, -27, 109, 115, -73, 34, 17, -12, 74, 55, 39, -90, 49, -75, 0, -94, 15, -89, 68, -51, -83, -54, -54, -66, 18, -93, -22, -41, -89, -46, -78, -118, -47, 
  -44, -98, -86, -35, -98, 93, -17, 27, -52, 75, -102, 92, -24, -25, 65, 41, -96, 60, -62, 6, -57, 120, -35, -24, 109, -50, 81, 35, -15, 24, -77, -97, -35, -81, 67, 117, -10, 115, 94, 66, 
  -80, -68, -32, -2, -111, 80, -50, -30, -30, -66, -117, 66, -28, -20, 20, -115, 6, 53, -80, 27, 99, -74, -99, -97, -50, 80, -29, 92, 57, 34, 125, -114, 66, 50, 63, -19, 65, 45, 65, -56, 
  94, -59, 85, 12, -29, 65, -78, 8, 56, -15, -6, 2, 72, -61, -113, -68, -19, 54, 6, 100, -29, -15, -45, 38, -77, 83, 100, -15, -112, -32, 9, -95, 38, 108, -54, 86, 22, -83, 37, 62, 
  -23, 43, -10, 86, 109, -61, 65, -106, 84, 10, 17, -62, 63, -28, -87, -42, 101, -107, 23, 82, 102, 56, -74, -86, 71, -107, -27, -105, 93, -70, 113, 112, -106, -76, 96, -60, -91, 49, -51, 38, 
  68, 54, 90, -110, -35, 98, 3, -29, -104, -52, 21, 34, 109, 64, 31, -52, 15, -112, 17, -101, -122, -36, 68, 71, 74, 37, -5, -7, 0, 33, 104, 39, -107, 35, 55, 109, 65, 17, -103, -50, 
  43, -18, 79, -24, 80, -62, -80, 55, -21, 3, 112, -104, 43, -57, 31, 52, -36, -95, 0, -37, 116, 0, -115, -19, -17, -7, 99, 12, -96, -103, 38, 84, -57, -122, -97, -118, 62, 43, -85, 23, 
  -90, 13, 10, -117, -53, 19, 107, -93, -35, 25, -101, 16, 26, 94, 47, 78, -88, -102, -1, -81, 32, -33, -99, 38, 82, -90, 104, -104, -46, 70, -83, 22, 28, 71, 14, 10, 24, -99, 37, -56, 
  -127, 71, -44, -107, 20, -55, 15, 84, 47, -32, -59, 51, 43, -74, -50, -22, -109, -17, 55, 2, 88, 42, 2, -51, 45, 44, -14, 36, 27, -85, 10, 50, 0, -22, 56, -21, -43, -59, 50, -98, 
  -107, 105, -67, 13, -18, 52, -98, -76, -101, -84, 71, -127, -43, 60, 74, 62, 44, 72, 22, 29, -78, 81, 61, -122, 17, -61, 112, -4, -28, -5, -111, 40, -6, 105, 34, 25, -61, -84, -66, -98, 
  13, 0, 78, -49, 72, 50, -99, -46, -63, 83, 87, -36, -96, 15, 57, 107, 80, -3, 72, -31, 5, -37, 56, 93, 14, 8, 21, 97, -109, 49, 84, -69, -73, -43, 98, -34, -15, -10, 30, 114, 
  63, -40, 72, 26, 71, 59, 44, -106, 105, 63, -3, -87, -77, 45, -78, 60, 17, 91, -86, 3, -48, 9, -101, 60, 12, -25, -19, 78, 45, -16, 37, 94, -80, 118, -77, 45, 38, -52, 88, -16, 
  77, 57, -116, 85, -40, 62, 66, -70, 79, 7, 90, -6, 49, 1, -73, 80, -111, 72, 38, 122, -49, -5, 87, -84, -18, -13, 77, -106, -16, 45, 78, -101, 88, 111, 7, -101, 65, 98, -60, -73, 
  39, -85, 73, -44, -6, 42, -54, -25, -25, -36, -32, -111, 30, 75, 74, 24, -66, -38, -24, -119, 112, 28, -13, 61, -116, -34, 60, -42, -98, 120, -64, -44, 79, 8, 6, 14, 34, 15, -5, -115, 
  92, 62, 87, -117, -33, 117, -29, 50, 6, 87, 60, -65, 99, 119, -50, -7, -79, -79, 101, -23, 67, -26, -77, -67, -48, -103, -80, -117, -33, 64, -63, 88, 23, -22, 10, 57, -108, 2, -97, 63, 
  37, 39, 31, -32, 10, 22, -118, 93, 78, -37, -105, 60, -94, -118, -56, 113, 7, -90, 108, 108, -60, -48, 24, 107, 86, 113, -121, 41, 88, 81, 96, 18, -112, 84, -6, -5, -29, 115, 76, 64, 
  -77, 0, 104, 10, -95, 50, -58, -23, 110, 80, -116, 11, -79, 4, -91, -81, -28, 110, -34, 61, 54, -110, 74, 111, -19, -35, 17, 78, -76, 99, -56, 88, 43, -12, -8, 74, 91, 108, -48, -19, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 20,40 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0026160231791436672, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int32_t tensor_data5[40] = { -1, -25, -29, -8, -15, 0, 24, -13, 37, 3, -10, 4, -3, 7, 11, -15, 2, 0, -16, 11, 3, 0, -15, -17, -6, 2, 14, -20, -7, 0, -16, -11, 30, -10, -3, -19, 17, -9, -15, -4, };
const TfArray<1, int> tensor_dimension5 = { 1, { 40 } };
const TfArray<1, float> quant5_scale = { 1, { 0.00060289236716926098, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[40*222] = { 
  -10, -29, 39, 30, 33, -9, -108, -33, 17, -64, 84, 78, -118, -70, -92, 12, 49, -120, -83, -23, 37, -98, -109, -53, -86, -32, 32, -106, 92, 97, 32, 0, -29, -10, 83, 14, -80, -30, 90, -19, 35, -11, -25, -118, -91, 33, -64, -19, 99, -90, -16, 12, -38, -52, -72, 76, -6, -68, -63, -125, 41, 12, -123, 59, 71, -110, 91, 75, -8, -43, 39, -86, -54, -36, -70, -40, -28, 34, 85, -113, 31, -68, -46, -87, 60, -69, -36, -27, 52, -82, 0, -109, -4, -63, 48, 90, 3, 46, -84, -110, -49, 85, 20, 61, 26, 88, -32, -48, -44, -41, 25, 46, 99, -25, -105, -21, -48, -98, 92, 84, -47, 51, 79, -62, -49, 33, -19, -105, -8, -55, 9, -58, -13, -13, 79, 56, -20, -22, -99, -26, 95, 14, -69, -78, -42, -24, 17, 87, -21, 26, 0, 27, 57, 99, 35, -40, -18, -5, -11, -4, 38, -4, 18, -23, -9, -45, -101, -14, -20, -101, -99, 33, -47, -75, 21, 77, -87, 27, -16, 55, -27, 56, 42, -78, -53, 14, 70, 0, -104, 41, 50, -49, 88, -28, 62, 45, -86, 16, -29, 25, -32, 23, 9, 64, -4, 15, 14, -41, 104, 106, 67, -74, 81, 90, -82, 97, 94, -97, 92, -61, -67, -24, 
  -120, 83, -42, 24, 37, -78, 18, 70, 94, 119, -10, 99, 65, -10, -18, -7, 106, 86, -78, 39, -36, 118, 74, 93, 20, -90, 15, -4, -94, 103, -9, -34, -17, 94, 71, 111, 76, 5, -43, -10, -26, -68, 40, -33, 11, 24, 93, -1, -54, 21, 31, 6, -70, 89, -11, -23, 118, -21, 38, -73, 37, -26, 61, 7, -82, -29, 79, 114, -60, -7, -95, -1, 14, 79, -53, -59, -57, -54, 57, -86, -75, 51, -101, -91, -102, -25, 45, -15, 61, -54, -78, 45, -16, -1, 76, 95, 88, -8, -56, -88, 88, -84, -55, 69, 62, -54, 7, -75, 43, 1, -83, 33, 31, -38, -59, 99, 75, -81, -5, -26, -114, 11, -23, -18, 22, 32, -3, 101, -50, -98, -123, 85, 55, -119, 85, -76, 54, 95, 60, 24, -86, 6, 21, 34, 95, 8, -42, -39, -39, 53, 86, -50, 3, -75, -113, 11, 82, 88, 70, 7, -42, 17, 75, 11, 62, -64, -26, 56, -53, 71, 79, -24, 14, 8, -95, 98, 72, 75, -45, -98, -109, 92, -58, 23, -114, -74, 60, -30, -122, 58, -105, -63, 50, -22, -82, -66, -53, 62, 98, -47, 16, -80, -6, -13, -55, 90, -96, -121, -22, -98, -37, 84, -5, -58, -12, 61, -74, 85, 20, 60, 52, -25, 
  55, -109, 40, 55, 92, -98, -96, -80, 20, -14, 94, 45, 0, 95, -64, -63, 52, -22, -96, 67, 59, -102, 43, -53, 44, 62, -14, 63, 18, 18, 108, -11, -25, 29, -27, 0, 13, -34, -96, -66, 34, 29, -4, -42, -102, -93, 11, 96, 20, 23, -121, -72, 40, 91, 6, -55, 5, -69, 56, -23, -53, 113, 103, 33, -89, 68, 28, 61, -48, 71, -10, 107, -84, -86, -55, 56, -48, 32, 52, 73, -5, 9, -20, -63, -56, -102, -10, -50, 53, -68, 60, -7, -63, 59, 52, 14, -35, 6, 29, -72, 107, 27, -87, 35, -100, 86, -35, 74, -91, 102, -5, 40, -63, 2, -91, -9, -57, 96, 55, 63, -90, -115, 12, -4, 81, 11, 80, 52, -106, -126, 29, -4, -66, 58, 28, 27, 60, -9, -46, -90, 54, -64, -82, 8, 50, -55, 92, 80, 71, 79, 70, 20, -19, -8, 88, -73, -81, 79, 91, -31, -10, -10, 64, -126, -80, 23, 11, -63, -85, -28, 81, -36, 75, 29, 46, 27, 70, -82, -74, 78, -95, -7, -70, -43, -52, -5, -95, -36, -109, -111, 7, -70, -67, -76, -50, -105, -85, -54, 82, -32, 53, 63, 92, 83, -41, -42, -126, 46, -71, -34, 81, -63, -3, 5, 28, -38, -18, 93, -23, -35, -101, 95, 
  -95, -72, -24, -10, 60, 81, 50, 42, -92, 29, -80, -79, 63, -87, 86, -58, 86, 59, 104, 14, -98, -4, 100, -9, 60, -78, -27, 21, -99, -47, 96, 102, -78, 63, -73, 61, -65, 17, -48, 29, 13, 63, -31, -16, 62, 37, -97, 86, -73, 77, -45, 78, -63, 3, 9, -104, -18, -6, -110, 70, -113, -5, -104, -12, 21, -50, -40, -33, -79, 0, 59, 17, 10, -56, -43, -16, 81, -76, 34, -72, -42, 88, -63, -42, 35, -110, -7, 57, 32, 71, -34, 88, -11, -25, -3, -25, -6, -7, -58, -80, -68, -81, -7, -6, 89, -22, -18, -43, -111, -100, 93, 73, 88, 68, -63, -4, -112, -79, -49, 87, -10, 79, -101, 6, -114, -109, -33, -2, -80, 95, -25, 50, -84, 53, -17, 35, 19, -87, 69, -47, 99, 48, 97, 79, -74, -61, -111, -33, 24, -47, -33, -17, -11, 21, 90, 41, 31, 94, 70, -87, -61, -81, -16, 25, -67, 95, 18, 3, 41, 21, 25, -73, 17, -25, -89, 36, -34, 2, -3, 43, 31, -88, 27, 63, -79, 18, -10, 113, 93, 20, -100, -100, 19, -64, -14, 40, -28, -40, 58, 101, -13, 67, -49, -59, 99, 15, 60, 6, 15, 106, -16, -20, 90, -32, -53, -8, -2, 49, -71, -75, 26, 63, 
  83, 12, -93, 87, -57, -34, -72, -75, 70, -3, -7, -16, -29, 87, -95, 56, 105, -31, -29, 29, 16, -93, 68, 88, -16, 76, -80, -25, 76, 103, -89, 107, 12, -42, -103, -91, 81, 41, -35, -57, 77, 50, 34, 22, 74, -42, 24, 30, 23, -79, -17, 34, 107, -98, -67, -64, -59, 47, -37, -54, 106, -57, -88, 110, -43, -28, 51, -18, 63, -94, 40, 77, 82, 92, -97, -14, -44, 46, 83, 98, -43, -102, -108, 23, 103, -26, -83, 65, -37, -29, -40, 44, 34, -49, 96, 99, 52, -38, 1, 11, -67, 22, -72, -12, -51, 96, 42, 93, -11, 63, 28, 20, -56, -11, -48, -62, 40, 96, -53, -44, 106, -102, 67, 56, 102, 96, 42, 3, 68, 52, -7, -96, 66, -99, -49, 24, -60, -79, 19, 48, 95, 18, 42, -27, 62, 44, -84, 75, -95, -64, 21, -26, -7, -101, -71, -73, -39, -10, 35, 84, -95, 64, -49, -92, 105, -39, -106, -41, -72, -18, 21, -31, 102, -31, 78, -59, -116, 108, 82, -61, -107, -79, -11, -111, 7, -64, -72, -19, -28, 29, 14, -30, -100, -5, -20, 25, 104, -93, -38, 50, 96, -7, -52, 19, -99, 42, 29, -105, 60, -36, -2, 16, 96, 91, 16, -70, -53, -15, 38, 5, -8, -8, 
  -33, 20, -38, 11, -43, -104, -110, 19, -100, -34, -87, -11, 81, 30, -53, -22, 86, 26, 76, 45, 76, -77, 19, -83, -3, 98, 37, 49, 37, 63, 29, 73, -31, -41, 96, 104, 76, -111, -13, 71, -86, -55, -9, 32, 110, 13, -68, 5, -14, -2, -15, 90, 24, 108, 38, -11, 33, 78, 54, 30, -110, -86, 4, -18, -54, 9, -70, 22, 49, 86, 61, 0, 17, 98, 96, 85, 38, 78, -35, -44, 63, 56, 73, 107, 61, -6, -94, -92, -86, 108, 93, -108, -16, 4, 110, -58, 56, 27, 101, 79, -12, 76, -100, -85, 19, 45, -44, 69, -71, 24, -70, -37, 84, -103, -79, -15, 50, -99, 28, -58, 79, 26, 40, 99, -49, 45, 44, 10, 13, 63, -88, -40, -13, -105, 49, 12, 90, 9, -26, 106, -76, -103, 36, -57, -7, 33, -85, -13, -90, -101, -91, 111, -39, -112, -77, 111, 0, -75, -31, -6, 52, 74, 83, -12, -4, 34, 68, 92, -5, 61, -13, 12, -83, 107, 101, -14, 47, 2, -26, -112, -17, -15, 62, 19, -33, 41, -65, 93, 102, -36, -70, -94, -98, 58, 43, 99, 56, -31, 63, -71, 97, 38, -67, -44, 29, 108, 25, 3, -39, -4, 94, 48, -92, 106, 14, -21, 77, -48, -82, 94, -10, -43, 
  60, -33, -54, -27, -30, 3, 2, 45, -44, 108, -54, -52, -50, 108, 83, 68, -8, -98, -112, -101, -23, -21, -68, 94, -24, -86, -109, 23, -4, 48, -81, 66, 41, -113, -95, 5, -45, 39, 64, 53, 97, 21, -55, 74, -47, -73, -40, -31, -47, -94, -69, 4, 104, -21, -68, -13, 67, 16, 47, -107, -71, -105, -57, -23, -46, 29, -27, 57, -107, 61, 25, -59, -98, 59, 93, -74, 0, -35, 28, 81, 110, -18, 74, -40, 84, -109, 73, 50, -109, 39, 70, 90, -56, 49, -95, 54, 65, -105, 54, -35, -80, -46, -25, 98, -3, -31, 76, -118, -7, -67, -1, 7, 32, 43, 124, -21, 76, -59, 11, 12, -38, 9, -81, 55, 107, -74, 21, 14, 104, 114, 114, -101, 86, -74, 11, -55, -70, 80, -41, -78, 93, 52, -60, 15, -34, 25, -17, -94, 78, -110, -57, -90, 8, -19, -62, -37, -73, 43, 50, -17, -6, 94, -43, 102, -103, 55, 40, -53, 42, -36, 7, 86, 119, -5, 28, 82, 85, -47, 60, -17, -38, -95, -89, -18, 101, -50, 64, -55, -56, 86, -90, -30, 44, 56, -40, -62, 25, 9, 69, -76, 21, -80, 98, 114, 33, 110, -26, 78, -78, 53, 65, 91, -107, -77, -43, 14, -60, -47, -75, 105, -58, -73, 
  73, 24, 95, 24, -42, -33, -45, -78, -45, -82, 84, -68, -31, -41, -112, 14, 12, -48, -27, 72, -26, 109, 36, 19, -66, -77, -21, -37, -96, 74, -73, 60, 60, 31, -49, -64, -21, -8, -53, -69, 102, 56, 21, 41, 68, -34, 11, -95, -43, -2, -38, -7, -17, -51, 105, -68, 18, 96, 92, -40, -31, -6, 47, -71, -11, 77, -17, -64, -13, 16, -4, 69, 47, 6, 67, 60, 0, 63, -45, -27, -21, 19, -26, -117, -112, 60, -47, -101, -59, -57, -3, -30, -79, 61, 112, -107, 70, -38, 110, -50, -45, -56, -7, -9, -32, -10, -93, 24, 118, -8, -25, 5, 22, -49, -91, 31, -116, -7, 27, 86, 56, -49, 49, -111, -113, -27, -51, 64, -46, -85, -82, 65, -103, 87, 14, 28, -60, 58, -117, -42, -8, 48, 88, -57, 65, 73, -103, -49, 16, -91, -73, 88, 83, 11, 23, -40, 82, -111, 90, -92, 74, 20, -103, -82, 16, 50, -32, 63, -3, 30, 90, 33, 15, 21, -19, 54, 91, -91, -102, -54, 58, 89, -32, -116, -30, 61, 15, -89, 37, -48, -6, -112, 13, 29, -45, 92, 8, 79, 18, 47, -32, -109, 66, 15, -42, 21, 36, -93, 23, 15, -88, 99, -12, -84, -89, -109, -47, -9, -19, -73, -62, -47, 
  73, 77, -89, 5, 11, 19, 82, 35, 59, 124, 113, 111, 76, 89, 102, 60, -11, -94, -103, -79, -65, -111, -112, -53, -71, -120, 90, 37, -5, -30, 52, 77, -14, 81, 48, -62, -5, -18, -109, -54, -42, -79, 107, 12, 81, 17, -83, 104, 119, 58, -60, -38, 25, -16, 41, -40, 26, 95, 46, 105, 80, 7, 64, 22, -92, -87, -112, -74, -73, 30, 101, 73, -91, 56, -85, 79, -45, -34, -85, 74, 83, 35, -12, -77, 40, 112, 38, 106, 105, -100, -82, -68, 9, -71, -92, 61, -2, -90, -17, -108, 72, -38, 24, 5, 78, 92, -83, 75, 89, -109, 76, 21, -62, -66, 84, 54, -37, 51, -11, 69, 2, 116, 96, 23, 109, 43, 108, -51, -85, 110, 69, -1, 92, -38, -93, 123, 27, 93, -62, -87, -49, -25, 122, 32, -71, 65, 120, 23, 58, -116, 49, 38, -54, -98, -35, -40, 57, -71, -83, -34, 103, 106, 6, -70, 42, 48, 66, -97, 62, -90, 117, -65, 60, -41, 7, 55, 57, 92, -90, -50, 95, -55, 41, 114, -4, -97, -33, -25, 71, -100, 67, 125, 89, 105, 106, 67, 105, -29, 82, 22, -36, -8, -80, 114, 106, 33, -68, 18, -85, 60, 62, -35, 42, -68, 35, 95, 67, 115, 107, -76, 107, -8, 
  -92, -93, -63, -100, -60, -97, -113, -73, -14, 77, -25, 20, 110, 4, -5, -51, -83, 77, 74, -18, 24, -62, -49, 70, 94, 56, -109, -68, 61, -103, -101, -79, 0, -106, -78, -72, 95, -19, 104, -109, 58, -93, -81, -78, 52, 87, -33, 11, -5, -87, 68, -97, 14, -114, 43, 51, -49, 93, 86, 73, 87, -56, -63, 78, -57, -53, -42, -96, 96, 16, 84, 39, 10, 100, -109, -108, -54, 97, -89, -98, -26, 47, 2, -44, -9, 20, 71, -104, 6, 79, -114, 58, 48, 107, -25, 8, -51, 15, -46, -109, 55, -74, 42, 78, 87, 4, 17, 23, 59, 67, 23, -105, -69, -5, 9, -91, -30, -57, 105, -40, -36, 56, 56, -24, 33, -36, -6, 52, -70, 101, 102, 65, 89, -7, -24, -46, 109, 30, 39, 96, -107, -15, 26, -87, -10, 22, 8, -35, -78, -56, 102, 62, 53, -77, -16, -2, 49, -3, -4, -71, -50, -40, 60, 31, 59, -51, 15, 35, -44, 35, 46, -30, -54, 58, -77, -27, 99, 34, -42, 29, 27, 29, 36, 89, 81, -59, -53, -6, -2, 100, 50, -101, 92, -64, -27, 37, -91, 64, -38, -34, -104, 79, -88, 48, 53, -25, 78, 77, 105, -84, -13, -78, 46, -16, 42, 41, -68, -31, 98, 78, 61, -56, 
  100, 47, -87, 59, -14, -90, 24, 46, -8, 32, -102, -111, 83, -61, 71, -116, -98, 102, -41, -96, 34, -4, -45, -2, 57, -43, -28, 72, -81, 17, 24, 65, 23, -107, 46, 80, -31, -6, 34, 46, -49, 34, -52, -44, -48, -8, 47, -22, -67, -103, 90, 48, 50, 0, 82, -29, 35, -110, -37, -49, -59, -70, 90, -84, 47, 67, -85, 34, -20, 95, -50, -51, -23, -15, 40, 1, 47, -65, -49, -22, 84, 79, -16, 21, -13, 66, -63, 77, 32, 32, 24, 41, -25, -102, 101, -83, 69, 0, -32, -113, 29, 36, -37, 22, 33, -6, 76, 16, -84, 23, -14, -43, -16, 91, -52, -38, -11, -106, 36, 6, -45, -72, 66, -76, -64, 35, -107, -35, -12, -48, -109, -5, 56, -33, -79, 77, -104, 53, 3, 85, 5, -34, 29, -7, 91, -95, -56, -102, 57, 60, -56, -10, -36, 68, 0, 75, -53, 45, -69, 5, 11, -45, 55, -94, -87, -112, -99, -45, -75, 54, -39, -85, 11, 68, 73, -48, -25, 103, -54, -2, 43, -109, -77, -92, -106, -7, 3, 12, 20, -28, 48, 62, 87, -81, -33, 0, -117, -65, -13, 30, -14, 5, -26, -4, -54, -85, -91, 81, 80, 85, 64, -118, -25, -43, 86, 50, 86, 48, -27, -13, 47, -112, 
  -28, 90, -77, 111, 81, 88, 63, -49, -58, 89, -39, 91, 18, 52, 96, -28, -13, 13, -95, 13, 33, 80, -75, 7, -112, -100, 18, 85, 40, -4, 69, -19, 63, 57, -38, -102, -79, 84, 49, 38, 53, -88, -108, -77, -19, 51, -113, 17, 43, -27, -21, 77, 61, 2, -10, -36, 33, -114, -114, 56, 97, -5, -22, -74, 97, -79, 33, -110, -96, -68, -22, -30, 58, -11, -81, 81, -14, -11, 64, -13, 95, 3, -101, -48, 65, 33, 86, 88, 102, -27, -43, 48, -85, -4, 88, -107, -25, -54, 55, -114, -32, 87, -94, -78, -17, -53, -100, -35, -41, -20, -6, -46, 61, 36, 42, -72, 41, 35, 31, -8, 32, -72, -8, -3, -3, 65, 15, -92, 61, 105, -42, 19, -17, 13, -33, -98, 104, -49, 64, 70, 52, 74, 40, -85, 58, -14, -86, -75, 63, 34, 1, 11, 94, -27, 97, 44, 15, -99, 8, -50, -44, 60, 26, 108, -104, -85, 81, -19, -17, 75, -35, -46, 46, -56, 94, 78, -27, -45, 57, 9, -37, 28, 16, -17, -41, 27, -47, 103, -22, 89, -31, -29, -41, 6, -95, -105, 106, 91, 22, 43, 102, -30, -88, 7, -85, -59, 102, -26, 90, 103, 20, 23, 15, -9, -42, 99, 7, -17, 68, 64, 77, -67, 
  -54, 2, 64, -67, -91, -29, 27, -42, 14, 91, 52, -71, 55, 8, 93, -47, -108, 69, 91, -93, -13, -89, -111, 103, -15, 75, -110, -72, -74, -21, -37, -85, 19, 75, 10, 1, 51, 28, -45, -97, 17, 94, 103, -104, 1, -82, 22, -77, 38, 69, -77, 52, -5, -8, 55, -6, 3, -75, -53, 99, 64, 38, 37, -111, -61, -7, 90, 34, 60, 87, 70, 89, -43, -109, -39, 23, -9, -10, -83, -46, 77, -115, -84, -6, -53, 92, -106, 44, -50, -54, -88, -41, 83, -71, -63, -10, 15, -58, -35, -65, 15, -77, 6, 22, 19, 52, -58, 99, 76, -41, 43, -5, 79, 73, -89, 25, 26, -53, 26, -89, -84, 105, -103, 65, -66, -103, -90, 51, -58, -13, 34, 95, -13, -50, -14, 90, -70, -54, 17, 8, 5, 102, -32, -39, 56, 13, 4, 95, 20, 83, 97, 48, 0, -65, 96, -5, -24, -53, -15, -30, -112, -9, -12, 94, -75, -23, -112, 24, 74, 95, -7, 107, -25, 104, -98, 39, 26, -45, -36, 106, 47, -55, 20, -12, -45, -73, -89, -29, -62, 108, -71, 83, -20, 25, -13, -61, -17, -44, -8, -78, 28, -24, 45, 47, 14, 71, -24, -36, -13, 8, 41, 26, 98, 38, 105, 37, 32, 22, -71, -77, -53, -24, 
  23, -54, 115, -95, -20, 24, 95, -23, -114, -93, -89, -10, -56, -81, -29, 25, -96, -34, 32, 71, 86, 73, 75, -22, 95, 19, -99, 86, 4, 40, -15, -35, 59, 73, 7, -109, 56, 54, -43, 58, -37, -20, 65, 81, -6, 9, -76, -107, -48, 4, 19, 28, -69, -1, -32, 70, -66, -77, 51, 52, -11, -60, 91, -103, 24, -109, 20, -108, 31, -69, 78, 53, -46, 30, 62, -46, -84, -11, -58, 75, -26, 54, 9, 71, -83, 97, 38, -32, 24, -19, 56, -65, 28, -109, 99, -31, 31, -41, -104, 47, -76, 10, 73, 20, -58, 9, 17, -89, -52, -52, -104, 59, -12, -97, 110, -71, 77, -40, -91, -5, 29, -73, -78, -88, -23, 88, -88, -110, 24, 4, -62, -51, -80, -65, 101, -24, -82, 98, 0, -33, 46, -40, 98, 29, 64, -14, -29, 51, 8, 86, 58, -77, -79, 36, 70, -98, -71, -29, 45, -49, -77, -98, 80, -31, 25, 17, -18, -70, 12, 49, 64, -9, -54, 82, -59, 88, -77, -26, 70, -40, 63, -24, -76, 96, -33, 103, 31, -36, 87, -9, 63, 92, 77, 110, 73, -110, -25, -12, -65, -38, -104, -76, -95, -30, 88, -108, 50, 5, 99, 92, -26, 32, -67, -14, 106, -8, -90, -96, 36, -59, 15, -103, 
  102, -48, 25, -50, 48, 115, -94, -105, -95, 68, 98, -52, -104, -12, 88, 116, -51, -17, -95, 86, -115, -113, -24, -50, -115, -28, 28, -91, 92, 87, 0, -75, 10, 85, -27, 4, 96, 103, -31, 4, 68, -64, 29, 90, -88, -44, -13, -90, 92, 98, -96, -62, -84, 79, -33, -39, 121, -89, 118, 88, -50, -5, -71, 1, 104, -35, 2, 83, 102, -88, -34, -30, 83, 46, 69, -46, 87, 67, -24, -21, 43, 7, -85, 48, 83, 72, -41, -86, 107, 44, -103, -79, 41, 25, 109, -86, -33, -21, -88, 85, 115, 97, -97, -90, 8, 49, -33, -8, -42, -102, 16, -43, 85, -9, -45, 87, -36, -52, 10, -86, -31, 103, -12, -95, 12, 13, -43, 21, 51, -87, 89, 95, -4, -43, -25, 83, 110, 115, 10, 104, -8, -73, 77, -88, -42, -74, 66, -30, 116, -96, -33, 83, 44, -12, -65, 29, 94, -107, -36, -45, -39, -98, -97, 31, -39, 12, -98, 5, -33, -33, 119, -90, 21, -30, 113, 56, -23, -92, 95, -51, 18, 62, -56, 37, -43, -78, -42, -31, -60, 116, 76, 47, 58, -58, 12, -84, -78, 71, 20, -18, 98, 3, 117, -83, 5, 117, -44, 52, -68, -70, -105, -27, 112, 88, 88, -53, -52, -43, 43, 90, 109, 61, 
  -7, -89, -106, -21, 34, -14, -69, 46, 12, 32, -108, -98, 21, -53, -22, 28, -36, -3, 5, 35, 70, 39, 85, -93, -75, 53, 85, 51, 104, -75, 9, 27, 24, 24, 16, -89, 96, 39, -51, 87, -85, 8, 105, 4, 57, -10, 16, 100, -99, 53, 79, 100, 71, 14, 113, 33, -107, 70, -32, 2, -54, -9, 48, -60, -26, -13, 30, -68, -54, 21, -52, -39, 97, 112, -15, 56, -53, 61, -61, -63, -69, -97, 2, -104, 64, -30, -68, 54, -17, -98, 111, -73, -26, -12, 9, -89, 40, 63, -86, 37, 92, -9, 92, 56, -61, -4, -39, -23, 84, 10, -50, 7, -56, 47, -34, 7, 96, -52, -93, 45, -73, -119, -99, 6, 62, -26, 53, -116, 96, -70, -88, 43, 63, 26, -10, -69, -34, -5, 27, -67, -70, -93, -64, -79, 0, 92, 20, -116, -103, -31, 36, 86, 78, 52, 0, -88, -38, -80, 83, 89, 50, -65, 29, 28, -110, 40, -79, -62, 17, 97, -34, -82, 4, -67, 19, 94, -31, 79, -48, -15, -98, 46, 96, -72, -37, 92, -23, -49, -83, 28, -77, -85, -17, 42, -17, -14, -9, -87, -9, -46, 90, 81, 104, 72, -103, 43, 6, -66, 55, -15, -112, -113, -77, -34, 78, 53, -43, 20, 47, 51, 103, -33, 
  16, -34, 79, -34, 46, -87, 36, -28, -74, 63, -79, 60, 64, -2, -61, 60, 107, -12, 55, -29, 22, 43, 11, 110, 14, 32, 3, 9, 7, 96, -49, -41, -55, 25, 20, -69, -36, 92, -48, -56, 26, -110, 1, 13, 113, 21, 110, 25, 18, 108, -7, -11, 108, 63, -8, 75, 90, -85, -16, -48, 71, -51, 122, 7, 119, -4, 1, -59, 92, 124, 109, 81, -38, 122, 3, -65, 79, -7, 47, -69, -92, -15, 87, 99, -19, 58, 57, 53, 55, -102, 89, -89, 113, -63, -91, 127, -62, 125, 44, -16, -47, -62, 115, -81, -53, -71, 86, -26, 113, 97, -77, 100, -13, 65, -79, -121, 81, 25, 106, 100, -56, -65, -70, -16, 52, -25, -95, -51, 50, -104, 67, -8, 5, 1, -99, -62, -53, -97, -87, -49, -86, -12, 31, 11, 8, -23, 13, -13, -71, -83, 105, 36, 30, 19, -90, 74, 35, 75, -27, 0, 98, 78, 78, -6, -53, 96, -29, 61, 81, 58, 73, -95, -33, 116, 69, -9, -42, -64, 106, -86, -12, -19, -29, 91, -47, 72, 115, 107, 109, -97, 26, 27, 97, 63, -50, -88, -98, -5, 20, 117, -19, 5, 42, 36, -54, 54, 71, -77, 109, -82, 37, 22, -98, -78, 101, -19, 42, 92, 74, 21, -50, -34, 
  -21, 99, 81, -44, 38, -39, -39, -80, -78, 103, 60, -82, -60, -56, -8, -15, 4, 10, 106, 78, -106, 112, 33, 10, -85, -52, 103, 32, 83, -24, 34, 54, -23, -12, 36, 85, 71, 52, -90, 82, -90, -99, 58, -43, 25, -2, -103, 80, 47, 100, 97, 8, -64, -89, 30, -101, 86, -76, 77, -55, -67, 29, 2, 51, 105, 58, -68, 8, 105, 24, -111, -103, 57, 32, 95, 54, -109, 32, -24, 45, -87, -108, 92, -99, 92, -108, 77, 85, 23, -38, 112, 100, -96, 99, 19, 71, -1, 94, 33, 47, -1, 16, 30, 42, 52, -92, -11, -19, -53, 22, -25, -17, -78, -8, -111, 90, 65, 52, 13, 51, 107, -38, -57, 82, 103, 37, -81, 41, -100, -72, 103, -15, -9, -90, -58, 89, 70, 102, 91, 47, -19, -69, -70, -71, 34, -63, -104, 37, -26, -95, 32, 59, -33, -108, 15, 27, 55, -98, -83, 34, -87, 54, 37, -111, 103, -112, -9, -70, 45, -92, 79, -56, -74, 17, 12, 25, 108, -86, -23, 81, -109, -28, 86, 83, 1, -21, -79, 40, 4, -12, -37, -56, 93, -94, -48, 68, -32, 30, 35, -15, 44, -101, -76, -38, -35, -21, 36, 5, -111, -106, 74, 69, 43, -101, 28, -67, 8, 55, -105, -83, -84, -9, 
  -100, 62, 48, -80, -10, -108, -97, -82, 14, -54, -49, -54, -42, 2, -93, 58, -64, 117, 38, -79, -74, -60, 10, 119, -81, 13, 57, 78, -66, -24, -28, -67, 62, 104, 13, 76, 91, -112, 96, -31, 24, 90, 47, 88, -12, -112, 66, -86, 58, 109, -106, 33, -49, -51, 13, -69, -104, -55, 57, -90, 103, -23, 38, -17, 13, -92, 11, -9, 36, -40, 85, -9, 99, 35, -25, -6, 85, -8, 46, 101, 25, 34, -39, -51, -13, 91, 109, -7, -64, 85, 55, -95, 94, -95, -8, 2, -27, 27, -38, 72, 78, -33, -13, -62, -21, 14, 91, -48, 91, -8, -53, -29, -22, -84, -18, 22, 65, 4, -62, 53, 13, -15, -51, 16, -3, -33, 64, -68, 102, -9, -65, 79, -112, -2, -93, 94, -42, -44, -102, 66, 103, -33, -103, -21, 24, 1, -26, -30, -7, -94, -51, 101, 13, -91, -1, -50, -4, -44, -40, -2, -5, 16, 35, 10, 97, 73, 31, -114, 70, 53, -48, -101, -105, 3, -105, 19, -85, -57, 102, 92, -12, 42, -69, 23, 24, -10, -46, -34, -44, -115, 94, -104, 5, -109, 45, -101, -45, 103, 52, 22, -28, -24, 95, 42, 93, 49, -52, 26, -33, -95, -3, 87, -23, -12, 63, 99, -98, -62, -14, -113, -58, -45, 
  -1, 1, -27, 40, 89, -91, 81, 3, -1, -58, -42, 88, -5, -74, 38, -81, 90, 6, -106, 2, -78, 25, -8, -111, -14, 23, -100, 45, 56, -78, -92, -86, -89, -19, -88, -111, -38, -22, -107, -102, 86, -7, -22, 101, 35, -102, -72, 37, -72, 112, -32, 76, -18, -107, -9, 108, -97, 46, -13, -49, 107, 44, 29, -109, -56, -77, 85, 11, 55, -54, 47, 39, 1, -78, -21, -108, -22, 11, -83, -4, -83, 91, 35, 74, 93, -38, 40, 19, -84, -70, 26, -38, -46, -81, -43, -41, 106, 3, -92, 88, 32, 9, 48, -78, 17, -26, -45, 19, -54, 63, -62, 44, 35, -114, -70, 85, -52, 7, -55, 16, 104, -39, -89, -63, 34, -107, -102, -31, 111, 114, -55, -108, 114, 90, 71, 59, 92, 28, -25, 46, -57, 88, 33, -22, 47, 106, -21, -3, -66, 65, 38, 105, -105, -99, -30, 73, -96, -90, -15, -43, 0, -109, -26, -54, -76, -23, -109, -7, -40, 101, 2, 54, 94, -38, -27, -39, -38, 51, 61, 90, -18, -20, 93, -44, -56, 100, -57, -66, 59, -51, -83, 71, 39, -62, 70, -58, 14, 46, -30, 5, 31, 59, -98, -69, -83, -11, 44, -59, -4, 38, -29, -60, 56, 18, -31, -28, -93, 85, -2, -100, -74, -80, 
  -14, 93, 55, -70, -87, 38, -73, 96, 79, -55, -30, 18, 69, -56, -101, 33, -93, 46, 78, -73, -11, -35, 90, 95, -81, -105, -26, 69, 81, 64, -46, -79, -79, 34, -16, -95, -31, -59, 53, 92, -3, 35, 12, -14, -105, -27, 91, -107, 57, -45, -113, 55, -47, 3, -54, 30, 69, 100, 36, 33, 0, 100, -21, 4, -18, -66, 29, -60, 106, 2, -4, -71, -24, 51, -56, 65, 65, -40, 26, -5, 82, -48, -50, -81, 89, -24, -37, 80, 55, -81, 36, -76, 38, -107, -2, -76, 107, 43, 80, -9, 64, 32, -72, -61, 79, 62, -41, -21, -55, -60, 65, -92, -78, -55, 111, -100, -37, -76, 22, 93, -68, -65, 88, 5, 101, 73, 47, -56, 41, 36, 94, 22, 90, 85, 100, -44, -11, -107, 46, -59, -63, -41, -7, -43, -33, 111, -54, 39, -20, 85, 59, -107, -43, -107, 43, -109, -34, 0, -63, -99, -47, 21, -97, 27, -34, 30, -44, 87, 97, -86, -82, 33, 38, -20, -47, 104, -109, 5, -53, -1, -33, 100, -11, 33, 92, -52, 68, 28, -60, -23, 78, 38, -93, -67, -51, -43, -8, -97, -107, 53, 42, 60, -95, 14, -34, 95, 14, -108, -63, -107, 80, 86, -45, -4, 58, 80, 13, 18, 90, 13, -33, -72, 
  -4, 28, 29, 30, 96, 54, 24, -54, 61, -60, -4, -14, 59, 89, -78, 110, 114, -27, -9, -45, -55, 84, -23, -71, 8, -7, -36, -106, 93, -85, 81, -15, 7, -109, -26, -57, 0, 97, -54, 108, -109, 3, 15, -76, -23, 40, 29, 66, -85, -89, 114, -5, 59, -62, -8, -84, 48, 113, 32, -69, -93, -45, 3, 56, 113, -23, -21, 80, -25, 79, 26, -36, 80, 65, -61, -51, -43, 81, 104, -44, -87, -48, -33, 22, -24, -67, -33, 78, -34, -62, 29, 37, 91, -19, 112, 52, 101, 28, -88, 104, -31, 18, 20, 106, 85, -12, -3, 14, 46, -73, -86, -44, 109, -17, -90, 81, 60, -63, -5, 3, 63, 111, -19, -88, 90, -65, 27, 38, -9, 60, -38, -73, -38, -21, -95, -32, 56, -98, -2, -11, -65, 36, -35, -109, -88, -40, 30, 3, 16, 12, -2, -1, -10, -31, 38, 76, -96, -35, 109, 14, 98, -97, -8, -40, -14, -37, 109, 101, 17, -72, 80, 51, 44, -80, -98, 58, 45, -38, -103, -22, 37, 64, 113, 103, -38, 6, 43, 62, -96, 27, 82, 107, -21, -40, 76, -37, -73, -17, 86, -89, 26, -19, 77, -39, -67, -57, 111, -47, -62, -55, 79, -92, -67, 77, -48, -35, -37, -99, -16, 84, -24, 98, 
  -21, -79, -65, 86, -16, 25, 60, 84, 72, 54, -97, -80, -21, 62, -80, 80, -73, -29, 0, -78, 64, -11, -14, -82, -22, -18, 5, -84, 22, -23, -31, 26, 71, -55, -30, -101, 101, -102, 54, -74, -67, -9, 25, 4, 6, 99, -32, 82, 62, 39, -88, -72, -36, 86, -12, 64, -82, -85, 119, 54, 97, -100, 100, 80, 1, -61, 62, 61, 88, 46, 104, 107, 9, 18, 7, -64, 6, 102, -41, -75, 83, 106, -60, -12, -10, -25, -100, 27, -46, -92, -81, 109, 22, -10, -66, 37, 96, -69, -85, 6, 2, -24, -80, 19, 101, -104, -33, 49, 84, -99, 29, -58, 6, -114, -30, 36, 13, -9, 7, -77, 94, -38, -108, -10, -46, 55, -54, -60, 85, -92, -85, -97, 72, -55, 31, 40, -19, 1, -44, -56, -61, 37, 6, -71, -103, -85, 115, -25, -59, -85, 65, -86, -59, -44, 11, 81, 8, -12, 104, 84, -97, 99, 93, 11, 39, 16, -52, 44, -41, -58, 90, -78, 87, -101, 90, 5, -104, -59, 43, -77, -32, 118, 110, -88, -60, -26, -58, -31, -69, -42, -49, 15, -87, -63, 75, 22, 23, 90, 39, -78, -112, 71, -27, 0, 48, 61, 62, -31, 3, -102, -72, -84, -41, -109, 74, -114, -103, -5, -102, -37, 8, -48, 
  51, 59, 57, 100, -101, 95, 74, -18, -46, 77, 52, -34, 64, 73, 80, 53, -42, 21, -99, 83, 75, 93, -79, -63, 59, 4, -104, -78, -102, -5, 45, 87, -93, -88, -94, -51, -72, 33, 105, 100, 64, -39, -83, -37, -39, 44, 20, -36, -14, -19, -2, -57, 1, -22, 38, 25, 89, 108, 12, 2, 97, 43, 12, -59, 43, -92, 104, -47, 31, 83, 81, -35, 33, -68, -90, -78, 91, 31, 102, -85, 45, 69, 37, -70, 24, -41, -90, 57, 57, -103, 87, 94, -100, 77, -55, -80, -60, 112, -68, -41, -17, -38, 0, 81, 7, 104, -16, -36, 2, -65, 43, -37, -99, -114, 15, 98, 89, 23, -18, 93, 29, -106, -40, 14, -47, 31, -111, -50, 89, 41, -79, -57, -24, -71, -74, 98, -70, -28, -45, 3, 105, 18, -72, -71, -9, -79, 73, -71, -60, 27, -36, -115, -8, -24, -52, 33, 59, 28, -69, -98, -80, -102, -66, -94, 61, 66, -13, 94, 100, -65, -73, 36, -9, -104, -44, -114, 41, 49, -38, -95, 12, 1, 20, -49, 85, 10, 82, 20, 15, -34, -52, -84, 15, -1, 101, -13, 91, 56, -89, -67, -33, -54, -116, 27, 91, -65, -66, 30, -25, -92, 84, 47, -104, 0, -31, -103, -47, 82, -41, -36, -22, -22, 
  20, -67, -81, -30, 62, 17, -47, 63, 76, -23, 105, -15, 8, 78, -86, -69, -77, -52, -100, 67, 36, -38, -67, 69, 78, 83, -26, 109, 88, 67, -87, 105, 65, 112, -24, 32, 41, 48, -28, -47, -110, -82, -67, -83, -43, 1, 69, 0, -22, -84, -95, -30, -55, -25, 38, -3, -2, -8, -73, -11, -28, -11, 10, -83, 48, -17, -17, -23, 60, 81, 20, 14, -104, 22, -101, 55, -71, 108, -64, -86, 67, -28, -77, -42, -37, -101, 65, 18, 61, 37, 10, 37, -86, -71, -69, -42, -65, 86, -21, -65, 106, -98, -96, -13, 11, 60, 39, 28, -102, 59, -23, -31, 75, 84, -37, -35, -44, -72, 108, -54, 83, -93, -65, -27, -110, -107, -112, 107, -17, 13, 94, 70, 76, 92, 96, -63, 58, -11, -48, 43, 20, -18, -11, 26, -114, 25, -75, -39, 40, -108, -39, 43, -6, 66, -59, -94, -21, 75, 21, -113, 4, 37, 40, -22, -67, 84, 80, -102, 100, 97, -70, -76, -22, -73, 80, -112, -108, -51, -99, -72, -28, -58, 93, -51, -91, -39, -98, 1, 90, -80, 38, 13, 41, -2, 8, -84, -60, 20, 43, -18, 50, 53, 8, 59, -95, 5, 2, -1, -62, 3, 56, 87, -101, 72, -82, -10, 56, 56, -61, 101, 42, -112, 
  84, -13, -95, 114, 32, -44, 50, -3, 30, 10, -90, -53, -26, -14, 121, -5, -63, -102, -57, 101, 44, -29, -107, -73, 70, -15, -46, 66, -13, 10, -105, -86, -2, 91, 52, -50, -84, -74, -18, -7, 41, 87, -88, -9, -20, 5, 84, -11, 32, 62, 28, -71, 13, -80, 52, -21, 54, 10, -96, -76, 53, 6, 92, -50, -108, 30, -49, 87, -93, 95, -9, -74, -72, 95, -52, 39, -97, -9, 84, -11, -109, -89, -108, -62, 10, 94, 2, 28, -32, 53, 38, -84, -61, -51, -90, 110, 14, -74, -7, 6, 37, 68, -86, -36, 71, -43, -45, -94, 90, -109, 108, -60, 23, -34, 83, 78, -49, 14, -16, -50, -99, 20, 42, 41, 14, -32, -31, -106, -103, -3, 60, -48, 114, 106, 21, -91, -55, 61, 18, -45, 60, 42, 0, -90, 21, 18, -9, 91, 101, -83, -89, 12, -78, -53, -31, 111, 18, 91, 98, 36, -90, 92, 111, -84, 39, -23, 63, 40, -95, -107, 48, -93, -37, -37, 93, 43, 99, -73, -95, 87, -49, -84, 9, -5, 18, 89, 74, -60, -12, -21, -64, -18, -112, -5, 53, 24, -95, 73, -73, 76, -98, 8, -15, -4, -30, -94, -77, 81, 81, 72, -73, -50, -4, 9, -55, -78, 90, -95, -104, 38, 91, -87, 
  -29, -52, -87, 81, 7, -3, 65, -19, -59, 82, 17, 66, -20, -98, 18, -113, -23, 54, 34, 99, 13, -7, -106, -71, -35, 79, 57, -23, 81, -53, 0, -81, 18, 56, -73, 87, 44, 72, 104, -38, 77, 45, -25, 32, -45, 74, 103, -107, -67, -9, -67, -34, -25, -83, -12, 56, -112, -31, -52, -45, 18, -5, -96, 45, -105, -114, 48, 80, 43, 99, 55, -114, 5, -105, 76, 84, 99, -94, -37, -49, 40, -76, -46, 63, 21, 75, 110, -96, -51, -34, -51, -8, -110, -106, -110, -77, -43, -43, 87, -10, -70, -68, 94, -2, 93, 37, -61, -64, -14, 24, 100, -12, -74, 123, -35, 9, -51, 77, -98, -84, -14, -68, 55, 100, -106, -33, 88, -58, 54, 32, 91, 102, 44, -61, 84, -69, -29, 22, -74, 93, -45, -91, -4, -100, -80, -5, -88, -25, -19, 100, 34, -90, 55, 41, -106, 73, -54, 38, -75, -102, -84, 113, -51, -75, 63, -40, -67, -103, 95, -83, -17, 39, -34, 60, 78, 44, 116, 27, -3, 77, -36, 50, 114, 21, 65, 26, 23, -43, -47, 63, -55, -74, -53, 30, -76, 62, 23, 58, 45, 93, 17, -101, 33, 110, -39, 78, 45, 59, 74, -106, 48, -58, 71, -8, -2, 58, 71, -18, 21, 0, 96, -91, 
  -123, 84, 33, 35, 83, 95, 31, -120, -73, 91, -85, -16, 91, 16, -30, 87, -113, -119, 17, -51, 19, 94, -24, -108, 43, -42, 6, -82, 67, -121, -44, -90, 24, -53, 105, 12, 40, 9, 51, 41, -119, -13, -117, 38, -50, -106, -74, -59, -107, 91, 56, -107, -48, -106, -49, -101, 42, -57, -23, 35, 22, -104, 35, -94, -25, -10, 14, 63, -27, -15, 63, 88, 64, -86, 12, -39, 52, 21, 7, -47, -106, -32, -50, 31, -37, -50, 1, 48, -120, -28, 81, -71, 11, 75, -12, -37, 91, 34, 66, 36, -10, 14, 93, -74, -27, -65, -7, 36, -113, 75, 13, 61, -53, -28, 39, -72, 78, 18, 47, 50, 12, -29, -34, -5, 82, 65, 44, -112, 86, 63, 32, -55, -32, 21, -87, 3, -66, -114, 59, -100, 78, -44, 21, -55, -15, 94, 8, -1, 60, 24, -119, -61, 17, 72, -87, 24, 99, -115, 11, 26, 72, -73, -110, -89, -94, -71, 67, 59, 51, 58, -68, 44, -22, -10, -27, -63, 23, -56, -25, -40, 71, -37, 41, 54, 52, -23, -106, -118, 4, -88, -42, -118, -106, -71, -53, -34, -119, -67, -84, -79, 72, 9, -21, -121, 61, 45, -40, 13, 50, -69, -104, -49, -7, 94, -37, 41, -35, -105, -49, 9, 12, -85, 
  104, -22, 66, -69, -21, 71, -38, -45, -49, 26, 78, 48, 74, -7, -94, -103, 1, -28, 97, 13, -55, -40, 36, -11, 36, -106, -67, 56, 55, -39, -22, -41, -103, 83, -54, -31, -87, -103, -53, 91, -67, -54, 27, 43, 64, -98, -22, -5, 30, -59, -65, 52, 83, 16, -7, 76, 54, 106, -67, -26, 92, -30, -100, 112, 87, 90, -29, 0, 101, 97, -3, -58, 18, -74, -69, 59, -78, 62, -107, -17, 14, -85, -101, 36, 27, -11, 90, -44, -31, 45, -36, -33, 50, -40, 62, 53, 65, 53, -43, 90, 40, -28, -28, -96, 54, -69, -41, 33, -103, 62, 62, -43, -104, -109, -75, -6, -71, -20, -7, 66, -3, -9, -78, 48, 39, -66, 104, 44, 37, 48, 86, -50, 28, -91, -23, 7, 23, 28, 63, -26, 80, -91, 75, -3, -107, 13, 103, 65, -41, 100, 1, -8, -59, 47, -79, -83, 47, -12, -88, -100, -39, 0, 28, 14, -101, -1, 28, -19, -19, -52, -41, -63, 21, 60, 43, 93, -16, 28, -80, -103, 26, 45, 66, -33, 86, -22, 21, 99, 69, -115, -90, -48, -109, -25, -59, -113, -65, -23, -96, 105, 104, -50, 12, -103, -82, -45, 108, -58, -101, -23, -1, 109, 101, 60, 55, -64, -103, 42, -27, 96, -82, 25, 
  50, -7, 66, -1, -112, -77, -29, 87, 65, -71, 70, 104, 75, 33, 50, -32, -3, 34, 84, 16, 47, 27, -112, 46, -87, 106, -105, 20, 12, 34, -61, 84, -26, -32, 46, 74, 2, -84, -32, 77, 107, -63, 85, -60, 20, 43, -14, 102, -104, -50, -86, -40, -5, -51, 41, -61, -49, 73, 62, 55, -109, 96, 50, -37, 44, -65, -31, 51, -3, -110, -76, -5, 40, -10, -11, -102, -86, -95, 54, -21, -111, 45, -111, -57, -68, 79, -36, -67, -80, -21, -4, 83, -78, 78, -4, -59, 105, -95, -38, -19, 28, -31, 68, -84, -2, -8, 89, -29, 97, 25, 34, -109, -63, -38, 40, -14, 25, 2, -106, -98, 32, -72, 29, -25, 110, 43, -51, -110, 109, -74, 102, -57, -44, 97, 17, -42, 82, -86, 35, 89, 2, 7, -78, 109, 12, -53, 54, -98, -84, -100, -109, -89, 7, -88, 41, 34, 70, -55, -63, -61, -12, 23, 4, 5, 50, -59, -61, 79, -12, 40, -73, 30, 43, -29, -92, -89, -60, -28, 70, 54, -12, -61, -43, 59, -73, -95, -101, 41, -70, 110, -53, -10, 25, 69, -49, 42, 24, -24, -51, 112, 78, 25, 12, 56, 5, -73, -17, -4, -78, 102, -104, -107, 32, -37, -23, -29, -84, -71, 110, 86, -70, 96, 
  19, -112, -55, 11, 31, 28, -94, -71, -5, 21, 49, 85, -21, -36, 76, -87, -22, 102, -82, 35, -10, -29, 83, -100, 48, -63, 0, 104, -41, -11, 45, 82, -102, 57, 38, 18, -39, 93, -70, 103, -82, -79, 69, 24, -63, 98, -64, 1, 34, 48, 65, 43, -53, -100, 8, 3, 53, 16, 96, -64, -91, -82, 55, 28, -97, -46, -100, 38, -99, 69, -79, 31, -105, -40, -52, 67, 91, -69, 6, -2, -103, 31, 3, -74, 4, -44, -105, 88, 2, 101, -100, -90, 70, 60, 10, -106, -107, 47, -57, -16, 88, -44, 66, 63, -18, -47, 44, -63, 108, -7, -1, -96, 28, 20, 77, -91, 60, 46, -77, 11, 52, -29, -10, 46, 105, -59, 101, 78, -7, -14, -80, 60, 37, 13, -66, 75, 6, 0, 42, -21, 58, 21, -72, 71, 55, -15, -108, 73, 101, 33, 88, 39, 50, -57, 22, -62, 11, -46, 45, -39, 49, 53, 46, -5, 72, 19, -75, 10, -60, 102, -50, -115, -7, 82, 96, 21, -117, 9, 16, 7, -66, 88, -29, -111, -108, -38, 14, 54, -97, 50, -86, 51, -49, -20, 100, 62, 7, 68, 32, 3, -71, -72, -95, 38, -86, -98, -99, -59, 24, -112, 66, -69, 81, 19, -38, -41, -42, -53, 85, 15, -9, 48, 
  30, -32, -98, -51, -36, 99, 96, 47, -44, -2, -31, -2, 35, 44, 29, -38, -61, -34, 15, 51, 71, -24, -43, 43, -14, 68, 33, 60, -23, -94, 56, -31, 68, -32, -30, 3, -67, 29, 81, 12, 98, -60, -101, 50, 69, -91, -87, 30, 71, -29, -5, 80, 42, 112, -90, 27, 44, -60, 21, 44, 111, -11, -18, -75, 97, 80, -8, 39, 99, 78, 31, 63, -88, -31, -59, -67, -4, 38, 112, -25, -36, 52, 44, -71, 16, 2, -53, 0, 109, 90, 95, 80, 36, 43, 79, -27, -109, 89, 77, -48, -79, -62, 61, -78, 4, 1, 31, -58, -24, 90, 91, -46, 24, -57, -111, -72, -6, -5, 66, -13, -91, 40, -26, 40, 29, -65, -35, -66, 42, -19, -36, -95, -54, 24, 76, -23, -7, -8, -65, 45, -10, -30, -46, -26, -16, -17, -87, -24, 103, 58, -48, 110, 111, -42, 36, 106, -19, 65, 70, 94, 38, 42, 79, 32, -57, 4, -77, -69, 49, -40, 52, -16, 102, 20, 30, 49, 69, -2, 36, -8, -89, -47, 19, 33, -33, 106, 38, 19, -14, -52, -51, 30, -36, 50, -72, -116, 94, 58, -106, -56, 53, 12, -37, -33, 49, -97, 106, -55, -42, 51, 76, 53, -89, 92, -114, -66, -34, -86, 103, 11, 93, 36, 
  -91, -30, -90, -94, 69, -91, 74, 94, -30, -24, 69, 72, -33, -54, -30, 25, 99, 64, -76, -75, 12, -60, -51, 57, 103, -106, 12, -118, 26, 41, -90, 64, 17, 33, 67, -62, 62, -97, 90, -83, 59, 79, 96, -53, 81, 114, 32, -88, 23, -19, 66, 35, -96, 81, 8, -45, -65, 5, -48, 50, -23, -72, 31, 49, 82, 48, -21, 89, -17, 98, 10, -41, -45, 64, -99, -89, 52, 119, 71, -44, -21, -30, -94, 124, -48, -61, 47, 70, 25, -112, -33, -24, -90, -105, -92, 97, 57, 92, 20, -68, 41, 80, -113, 95, -23, -119, 53, 67, -67, -53, 94, -20, 80, -22, 68, -34, 74, -62, 26, 66, 76, -82, 42, -58, 81, 87, 96, -95, 124, 87, 97, 76, -68, -85, -97, 56, -97, 111, 1, -24, -15, -57, 9, 37, -97, 17, 20, -75, -15, -92, 102, 67, -30, -33, 103, 109, 56, 112, -14, 116, -56, 96, 103, 47, 12, 113, 34, -82, 120, -83, -47, -84, 30, -84, 60, 87, 40, 36, -4, -76, -98, 105, 72, 104, -41, 0, 38, 15, 2, -25, 100, 81, 1, -47, 77, 37, 122, 32, 14, -76, 60, -61, 103, -84, 78, 30, 64, -72, 28, -64, -30, 34, 122, 10, 55, 95, 120, -64, 62, 118, -92, -12, 
  -120, -15, 108, 98, 20, 21, 23, -86, -26, -50, -96, -46, -120, 86, 0, -117, -114, 21, -15, -41, 50, -87, -60, 58, 64, 45, -59, -49, 73, -25, -44, -94, 79, 82, 100, -27, -26, -89, -54, -68, 43, -44, 9, 86, -117, 18, 53, -89, 96, -65, 88, -92, 34, -25, 35, -111, 22, 48, -75, -105, -54, -46, 11, 78, 82, -94, -13, -110, -46, 77, -22, -114, 67, -66, 95, -83, -83, 93, -23, -57, 67, 17, 1, -103, -47, -51, 23, -97, 72, -8, -93, 6, 28, -4, 58, -121, 50, 2, -34, -125, -6, 41, 21, -72, 54, 92, -88, 80, -50, 89, 87, 87, 38, 45, 101, -10, 2, -117, -99, 51, -62, 18, 73, -27, 100, -61, 72, -86, -100, -33, 87, -23, -14, 32, -101, 14, 20, -48, -49, -47, 86, -60, 52, 66, -30, -110, 90, 68, 32, -35, 91, 4, -57, 47, 47, 100, 67, -78, -74, -13, -62, 84, -23, -70, 30, -59, -108, -108, -5, 95, 5, 82, 1, -40, -67, -55, -23, -64, -29, -84, -115, 70, -107, -26, -83, -10, -81, -33, 91, 53, 66, -43, -15, -19, 7, -5, 34, -107, -102, -90, -7, 56, -35, 60, 62, -65, 53, 70, 24, 52, -116, 72, 83, 44, -96, -53, -94, -18, -70, 28, -117, -76, 
  -82, 29, -80, 39, 40, -102, 116, -36, 25, -78, 120, 95, -53, -76, -17, -42, 88, -55, 45, -84, 111, 92, 89, -50, -28, 69, 1, -51, -7, -41, 68, 122, 122, 91, 80, -48, -25, 58, 36, 21, 11, -53, -84, 14, 26, 38, 67, 1, 91, 118, 106, 86, -34, -94, -60, 5, 66, 78, -88, 103, -5, -57, -75, 118, -61, -58, 7, 69, 60, 103, 52, -46, 87, -60, 84, -81, 74, -67, 53, -89, 73, -7, -53, 32, -48, 59, -54, 63, 67, 69, -72, 3, 38, 40, 50, 20, 109, -15, 31, 92, -98, -38, 78, -26, 60, 80, -12, 101, -92, 39, 123, 58, 89, -20, -31, 66, -13, -66, 100, -40, 65, -27, -87, 15, -14, -65, 25, -71, -37, 29, -101, -28, 20, -83, 62, -72, 104, -66, -69, -77, -11, 53, 55, 4, -50, -23, -94, 22, -33, -65, 53, -110, -59, 72, 17, -41, -11, -31, 112, 47, 103, -21, 67, -102, 59, -49, -43, 53, -8, -70, 42, 67, -36, -6, -22, -4, -42, 77, 114, -104, 97, -3, -51, 106, 57, 63, -68, -51, -20, -3, 17, 42, -72, -6, -21, -78, 66, 113, 27, -6, 87, -19, 59, -63, -77, 50, 41, -44, 112, -47, -29, 74, 39, 100, 102, 19, 2, -82, -92, 48, -56, 71, 
  86, -103, 29, 9, 28, 37, 47, 89, 58, 76, 102, 58, 11, -31, -51, -30, 68, 32, -93, 107, -45, -72, -60, -19, 84, -1, 103, -56, 57, 102, -60, -40, 54, -58, 80, 99, 105, 76, 24, 41, -74, 97, 82, 54, 108, 107, 66, 77, 57, 59, 106, -23, -61, 54, -54, -83, 30, -60, -87, -2, 33, -29, -16, -42, -73, -23, 105, -35, -23, 27, 43, 3, 28, 23, -87, -39, 85, 38, 70, -92, 102, 61, -37, 75, 12, -49, -67, 117, -98, -18, -38, -53, 33, -33, -99, 77, -83, -79, -79, 55, 105, -23, 5, 92, -89, -52, 105, 102, 66, -64, -83, 62, 14, 8, -13, -35, -101, -81, -67, 38, 76, 19, 16, -61, 17, -91, 61, 3, 49, -100, -35, 101, -106, 87, 6, 11, -29, 8, -56, 4, 41, 82, -27, 80, -63, 29, -76, -71, -101, 72, -8, -107, -12, -37, 102, -48, 24, -108, -80, 105, 72, -110, 41, -96, -9, 10, 42, -108, -79, 67, 30, -69, -59, -106, -61, -77, -61, -50, -43, 44, 41, 77, -19, 48, 31, -31, 29, 58, 22, -79, 90, 19, -64, -4, -35, -22, -5, -51, 78, 74, 96, 12, 97, -99, -102, -63, -39, 22, -114, -2, 51, 73, -87, -66, -71, 78, 25, -107, -72, 52, -32, 103, 
  -78, -8, -16, -74, -94, -45, 46, 31, -68, -49, -76, -60, -49, 73, 66, -14, -79, -71, -109, -8, -31, 69, -101, -114, -56, -26, -94, -118, -35, -90, 84, -5, 39, -54, 94, -35, 84, 53, 41, 31, 101, -39, 66, -76, -35, 98, 9, -63, -46, -66, -28, -28, 67, 91, -78, 14, -117, 24, 86, -108, -30, -25, 8, -111, 86, 76, 12, -11, -92, -113, -40, -58, 23, 55, 11, -7, 51, -43, 103, -39, 31, 77, -76, -116, 11, -35, 66, -44, 66, 84, -64, 35, -72, 50, 38, -116, 88, 56, -72, 16, 50, -56, 32, -29, -57, 96, -1, -87, -17, 17, -26, -107, -12, -31, 18, -100, -78, 19, 54, 97, -94, -111, -64, -35, 34, 57, -55, 0, 11, 112, -19, 6, 59, -48, -66, 38, -22, -103, -107, -35, -88, 89, 46, -81, 82, -113, -48, -26, 96, -32, 22, 72, 19, 20, 18, -48, -78, 7, -41, 105, -40, -74, -53, -15, -101, 82, 17, 1, 40, 59, 28, 11, 33, -36, -48, 5, 89, -12, -109, -67, -59, -101, 7, -85, -25, -21, -46, 103, -21, 22, -59, 55, 31, 87, 59, -69, -30, -95, -58, 24, 18, 101, -101, 24, 107, 6, -103, -105, -107, 112, -74, -66, -98, 16, -64, 73, -108, -64, -76, -110, 97, -19, 
  51, 75, -39, 89, -18, 105, 75, -41, 25, -64, -51, 106, -90, 32, -68, -87, 24, 108, -62, -96, -33, -32, -73, 108, 59, -58, 65, -77, -92, -48, -81, 111, 64, 8, -26, -36, 107, 23, -83, -90, -106, 15, 100, 22, 45, 104, -60, 55, -43, -106, 41, -72, -116, 101, -115, -56, 0, 29, 106, -19, 99, 95, 43, 91, 94, 47, 84, -26, 66, -23, -104, 77, -2, 43, -10, 96, -84, -34, 39, -60, -104, -10, 78, -57, 17, -38, 80, 86, 14, 82, 93, -51, 49, -30, -89, 87, 104, -87, 93, -55, -52, -70, -46, -29, -43, -7, 7, 63, -87, -100, -29, -43, -16, -72, 13, -24, 43, -21, 52, -67, -99, -109, -10, 59, -36, 80, -49, -70, 15, 105, 102, 46, -54, 13, -51, -57, -95, 33, 37, 57, -15, -13, 47, -91, -23, 29, -14, -92, -29, 80, 20, -44, 22, -20, -27, -114, 46, 37, -13, 29, -89, -96, -25, 51, 60, -28, 11, 36, -13, 107, 39, 36, 52, -16, -53, 63, -53, 94, -45, -86, 43, -115, -44, -61, 92, 51, 40, -89, -48, -48, -46, 105, 70, -66, -6, -27, -84, 68, 88, -103, -74, 40, -96, -13, -39, -42, 98, 46, 70, 48, 101, -43, -32, 72, 60, -85, 55, 105, -11, 16, -83, -1, 
  -40, -122, 3, -17, -44, -54, -90, -69, -79, 29, 79, 73, -112, -48, -93, -66, -117, 74, -89, -51, 10, 45, -30, 15, -112, -105, -74, -89, -79, 71, -68, 78, -69, -98, 90, 51, -60, 23, 12, 29, 38, -12, 9, 0, -100, 78, -46, -92, 15, -79, 99, -1, -9, -94, 49, 0, -73, -99, 32, -113, -76, 5, 94, -62, -4, -64, -20, -74, 96, 20, -45, -58, 68, 22, -37, 54, 45, -62, -51, -28, -59, -98, -105, 102, 56, -94, 70, 44, -65, 58, -57, 88, -97, -81, -5, -2, -61, -57, -63, -99, -104, 29, -71, 8, -90, -6, 89, 9, 73, 87, 68, 91, 72, 39, -43, -29, -105, -105, 0, -105, -42, -16, 9, -59, -22, 96, -101, -38, -117, 45, 63, -106, 75, 68, 60, -91, 20, -36, -89, 3, -2, 44, -100, -23, 67, -89, 5, -29, 10, 53, 99, 72, -84, 26, -9, 76, 68, 76, 81, -12, 49, 56, -69, 15, 22, 87, -28, -63, 63, 82, -120, 23, 49, -24, -25, -122, 52, 33, -78, 11, 50, -97, -88, -70, 97, 9, -12, 5, -28, 13, -60, -88, -9, -53, -14, 44, 64, 27, -46, -1, -83, 8, -97, 76, -106, 97, -83, 70, 34, -101, -120, -89, 21, 17, -68, -53, -69, -96, 18, -93, -91, -7, 
  88, -60, -51, -12, 82, 86, 2, -43, -91, 34, -98, -82, 14, -40, 100, 29, -56, 59, 43, 6, -61, 80, -72, 48, 19, 68, 54, -42, -78, 109, 90, 56, 0, -58, -52, 89, -5, 36, -121, -51, -14, -105, 37, -11, 2, 17, -24, -91, -79, -69, 86, -90, 70, -78, 63, 83, -77, 15, -57, 4, 21, -50, 82, 7, 13, 20, 70, 117, 103, -36, -59, 32, 96, 102, 42, 60, -41, -105, -25, 55, -105, -32, -89, 65, -71, 73, -27, 63, 6, -36, -73, -12, 40, -22, 103, -16, 64, 75, -73, -77, -107, 78, -10, 98, 39, -7, 25, 44, 73, -45, 84, -25, 74, -60, -109, -77, -15, 84, 93, -14, -88, -111, -18, 108, -71, -22, 81, 49, -29, -57, 83, -26, -84, 30, -83, 108, 29, -43, 73, 50, 38, 18, 41, 110, 98, 94, 47, 73, 47, 65, -61, 77, -61, 106, -53, -61, 51, 85, -27, 55, -30, -80, 43, 28, -30, -37, 19, 7, -53, 66, -54, -94, -39, -7, -80, -81, -50, -44, 2, 23, -60, -38, 18, 100, 84, 52, -88, -101, -88, 83, -111, -42, -100, 38, -26, 62, 94, -60, -63, 110, -110, 72, -71, 57, -65, -39, -1, -65, -22, 98, -51, 81, -63, 102, -27, 32, 61, -105, -25, -19, 72, -98, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 40,222 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0013459563488140702, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,40 } };
const TfArray<1, float> quant7_scale = { 1, { 0.097400844097137451, } };
const TfArray<1, int> quant7_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,20 } };
const TfArray<1, float> quant8_scale = { 1, { 0.032850112766027451, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,4 } };
const TfArray<1, float> quant9_scale = { 1, { 0.067801095545291901, } };
const TfArray<1, int> quant9_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,4 } };
const TfArray<1, float> quant10_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,6,5 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,4,3 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,2,1 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 222, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant1))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 8880, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 224), (TfLiteIntArray*)&g0::tensor_dimension7, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension8, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 32), (TfLiteIntArray*)&g0::tensor_dimension9, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension10, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 11, };
const size_t tflNodes_subgraph_index[] = {0, 4, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  10, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_311_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_311_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_311_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_311_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_311_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
