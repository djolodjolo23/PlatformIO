/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 10.10.2024 11:32:57

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 8
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 5792;
#else
constexpr int kTensorArenaSize = 4768;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,1950 } };
const TfArray<1, float> quant0_scale = { 1, { 0.040361545979976654, } };
const TfArray<1, int> quant0_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 150, 13, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 150, 1, 8, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 75, 8, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 75, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[2] = { -1, 608, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(16) int32_t tensor_data6[4] = { 90, -85, 2, 26, };
const TfArray<1, int> tensor_dimension6 = { 1, { 4 } };
const TfArray<1, float> quant6_scale = { 1, { 0.00013659163960255682, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[4*608] = { 
  11, -4, 30, -27, 21, 13, 13, -11, 16, -1, -28, 5, 29, 75, 70, 20, -6, 18, 8, 15, -7, -2, 28, -29, -11, 16, 9, -5, -45, 59, 26, 27, 6, -14, -36, -50, 11, 34, -23, 12, -39, -57, -51, -28, 28, 37, 29, -33, -13, -12, 32, 18, -11, 19, 21, -6, -13, -31, 34, -35, -40, 21, 50, 42, 2, 19, -22, -40, -11, 43, 37, -43, -3, 22, 75, -27, -37, 28, 52, 26, -42, 26, -7, -13, 31, 12, 37, -31, 33, 11, -41, -56, 25, 22, 11, -20, 49, 2, 35, 44, -62, -21, 35, -59, -19, -38, -46, -38, -9, 46, 31, 46, 41, 26, 15, 15, 25, -25, -18, 9, -52, -15, 70, -80, 8, 55, 27, -5, -3, 15, 1, -7, -61, -76, 12, -4, -10, -46, 20, -44, -34, 8, 45, 27, -10, 7, 21, 3, -9, -19, 12, -49, -5, -16, -15, -89, -8, 24, 26, 63, 1, 13, 45, 36, 3, -23, -24, -7, -43, -29, 14, -59, -16, 21, 44, 37, 35, 18, 8, 7, -16, 0, -72, -13, -32, -42, 26, -51, 4, 33, 25, 53, 27, 18, 20, -22, -5, -43, -60, 10, -57, -31, -2, -72, -38, 29, 5, 19, -23, 10, -19, 32, -8, -40, -56, 4, -34, -29, -26, -84, 13, 17, -14, -35, -13, 4, 9, -9, -16, -27, -66, -35, -13, 8, -3, -40, -62, 16, -20, 41, 8, 22, 15, 20, -22, -54, -67, 10, -15, 4, -11, -66, -15, 38, -40, 15, 0, 19, 24, -9, 2, -40, -78, 3, -42, 22, 3, -38, -4, 54, -30, 42, -14, 15, -1, -5, 8, -9, -19, 26, -2, -3, -4, -41, -49, -50, -13, -1, -3, 32, -3, -4, 34, 0, -69, 31, -5, -3, 15, 8, -23, -51, -38, 13, -29, 14, 9, 22, 45, -3, 21, 27, 10, -13, 32, 6, -34, 8, -38, 35, -22, -15, -11, -7, 58, -5, -18, 39, 1, -7, -22, -14, -7, 32, -24, 4, -57, 6, 32, 31, 17, -6, -25, 29, -1, -34, -18, 5, 17, 29, 1, 48, -34, 26, -14, -7, 27, -27, 16, 44, 38, -26, 25, -42, -21, 18, -30, 14, -78, 60, -6, 32, -6, -17, 1, 2, 35, 1, -16, -32, -39, 31, -19, 43, -65, 9, 21, -6, 25, -41, 6, -1, 19, 4, -46, -43, -17, 53, -34, 14, -8, 5, -4, 22, 56, 10, 37, 40, 9, 37, -34, -31, -33, 33, -10, 32, -8, 16, 0, 2, 29, -5, -8, 18, 17, -15, 25, -2, -4, 23, -13, 17, -10, 14, 16, 19, 24, -12, -5, -31, -3, 7, 34, -8, 21, 14, -12, -21, -27, -16, 28, 26, 50, -15, 35, 17, 16, 29, -13, 1, 19, 4, 19, 22, -1, -8, -36, 11, 16, 9, 2, 33, 25, 8, -39, 34, 38, -6, 8, 28, -11, -33, 13, -8, 19, -57, 13, 25, -13, -7, -14, -70, 1, -19, -7, 11, 22, -66, 0, -16, 49, -26, 8, -7, -12, 30, -6, -54, 9, 40, -9, -29, 20, 5, -22, -13, -7, -3, 21, -4, -25, 23, 0, -15, -23, -1, 14, -8, 5, -51, -8, -21, 43, -56, 8, -11, -13, -24, -52, 2, 2, 15, 8, -5, 20, -45, 26, 7, -26, -16, 44, -29, 8, -22, -70, -2, 38, 59, 47, 3, 13, -71, 19, -37, 38, 6, 24, -11, -54, 7, 18, -23, 20, 12, 16, 6, -13, -43, -16, -71, 54, 13, 20, -20, -15, 1, -63, -30, 10, 4, 20, 4, 20, -11, -38, 19, 4, -15, 21, 24, 10, 39, -110, -31, -15, 39, 13, 16, 
  -17, 11, -26, 28, 12, -52, -1, 13, 10, 14, 94, 12, -39, -15, -37, 1, 0, 37, -4, 11, 14, -14, -72, 10, 23, -10, 12, 3, -23, 22, -30, -19, 11, 21, 23, -43, -35, -10, -19, 14, -8, 24, 40, -17, -19, 9, -52, 16, 10, 36, 49, 18, -35, -49, -33, -12, -14, 11, 4, -39, -3, 6, -73, 24, -48, 3, 30, 27, -51, -14, -43, 5, -6, -27, -60, -13, 20, 2, -54, 13, -31, -36, 24, 27, -15, -44, 4, 26, -8, -35, 33, -43, -6, -7, -19, 35, -52, -11, 23, -20, -10, -13, 17, 12, 20, 10, -17, -20, -35, 0, -11, -10, -40, -17, -27, -24, -5, 11, -18, 26, 8, -8, 37, -13, 13, 22, -39, -6, 3, 10, -15, -9, 8, 28, -2, 41, -7, -8, 12, -23, 4, 26, -11, 7, 1, -23, 11, 28, -46, 39, -20, 33, -17, -6, 36, 20, 2, -18, -6, -2, -19, 17, 16, -23, -42, 54, -6, 29, -11, -19, 55, 26, -20, -39, -36, 15, 1, 40, 15, 10, -12, 24, -19, 38, 5, 0, 20, 13, -15, 39, -65, 0, 9, 16, 42, -1, -12, 13, 9, 26, -18, -6, 16, 32, -23, 26, -28, 19, 28, -34, 17, -47, -30, 51, -27, 6, -19, 11, 36, 18, -27, 12, -40, 28, 15, -27, -3, -42, 13, -20, 22, -3, -44, 20, 24, -32, -46, -37, -29, 24, 26, -17, -26, -28, 17, 56, 13, 32, -55, -4, 5, 25, 9, -30, -12, -111, 1, 7, -21, -45, 26, 55, -16, 20, -33, 2, 29, 30, -12, -34, -30, -76, 10, -6, 5, 7, -89, 23, -38, 22, -18, 27, 30, 21, -6, -31, -23, -18, 28, 5, -2, -20, -25, -50, -5, 23, -38, 1, 26, 30, -50, 46, -32, 6, 29, -10, 22, -24, -48, -2, -38, 10, -45, 9, 30, -32, 6, 17, 3, 22, 28, 24, -1, -21, -26, 10, -12, 17, -25, 20, 9, -11, -41, -33, -18, -19, 55, -10, 28, -39, -45, -52, -35, 22, -48, 16, 47, -24, -26, -34, 12, 16, 46, -16, 15, 4, -30, -4, 3, 26, -65, 5, 14, -4, -3, 4, -4, -13, 38, -49, -18, -60, -18, -20, -24, 22, -23, -33, 47, 34, 23, 33, 8, -23, 41, -24, 10, -14, 8, -7, 2, 28, -17, -11, 45, 29, 13, -19, 3, -36, 44, -12, -8, -25, -83, 0, -49, 3, -29, -4, 34, 46, 5, -18, -35, 29, 14, 9, -2, 25, -64, 36, -25, 10, -8, -9, 8, 3, -1, 4, -58, 29, -3, 7, 35, -17, -10, 20, 23, 11, -5, 30, 81, -18, 3, -21, -19, 8, 58, -11, 41, -26, -51, -31, 11, 33, 5, -11, 75, 14, 27, -6, -5, 27, 53, -22, 17, -25, -34, -34, 1, 2, -10, 25, 31, -46, -5, 11, -41, 31, 31, 0, 15, -13, -9, 23, -22, 14, -24, -30, 11, 29, -9, 49, 0, 41, 9, -36, -10, 37, -21, 7, -10, -14, -18, -46, 94, 31, -22, 27, 12, 47, -34, -1, -32, -37, 57, 27, 18, -32, -8, 20, -23, -25, -19, -20, -20, 20, -49, 33, -13, -6, 27, 22, -22, -1, -64, -17, -26, -40, -24, -18, -3, 44, -9, 42, 26, -17, 43, 8, -61, -11, -11, 0, -27, -55, -18, -8, -46, 50, -17, 24, 39, -42, -16, 6, -47, 26, -38, -19, -14, -47, -2, 6, -32, 38, -37, 26, 19, 12, -45, -13, -65, 7, -12, -39, 4, -18, -17, 16, -45, 43, -20, 26, 74, -8, -35, -14, -34, -51, -23, -24, 79, -20, -64, -64, -26, 27, 
  -32, 11, -33, -69, 2, -67, 2, -5, -20, -28, 3, 0, 21, -76, -23, -40, 40, -55, -26, 0, 38, -9, 30, -19, -26, -20, -75, -22, 25, 5, 8, -18, -9, -12, 9, 71, 4, -23, 41, -19, 30, -6, -13, 22, -34, -25, -1, -5, 41, -14, -16, -28, 64, -1, -37, -17, 29, 19, 1, -6, 9, 33, -4, -35, 35, -31, -13, -20, 13, -21, 6, -13, -39, -9, 15, 1, -12, -20, 21, -48, 9, 16, -41, 11, -6, -1, -28, -23, -34, 41, 27, 0, -42, -54, 22, -86, -3, -24, -50, -18, 78, -4, -6, 34, -46, 43, 43, -13, -24, 9, 33, -66, -9, 7, -36, -4, 1, -34, 25, -11, 22, 16, 14, 24, -4, -33, 28, -24, 1, 15, -5, 11, 65, -4, 14, -35, 6, 31, -33, 22, 4, -62, 6, 29, 23, 25, -8, 45, 68, 10, 41, 25, 25, 18, 41, 10, -1, -20, 4, -58, -13, 7, -3, 15, -34, -31, 30, 19, 8, 24, 0, -16, 26, 11, 46, -22, 42, -19, -36, -22, 14, -16, 63, 9, -9, 45, 13, 11, 50, 12, 20, -65, -38, 2, 1, 18, -6, -45, 41, -4, 46, -23, -1, 15, 28, -15, 32, -27, 11, -21, -20, 20, -27, -31, 40, -32, 18, 6, -26, 17, 14, 21, 33, -27, -8, -13, 17, 54, -74, -12, 47, -8, 34, -36, 42, 25, 46, 14, 38, -1, -12, 40, 34, 44, 26, -29, 63, -24, 5, 7, 22, 30, 2, -26, 27, 36, -6, 24, -6, 8, 23, -25, 81, -10, 15, -16, 6, 9, 16, -17, 37, -1, -3, -1, -2, 29, 71, -3, 72, 5, -8, 3, 14, -13, 42, 10, 45, -12, -35, 15, 6, -1, -47, -44, 19, -11, 29, 19, 10, 11, 25, 14, 16, 0, -56, 5, -20, -8, 7, 1, -3, -2, 47, -26, 5, 7, 37, 30, 10, 7, -13, -18, 5, -4, -16, -10, 7, -19, 4, -1, -13, -19, -10, 12, 9, 35, -34, 9, -22, 2, 41, -59, 30, -23, -16, -22, -26, -37, 50, 21, 11, -40, -59, 12, 14, 50, 23, -14, 31, -3, 36, 2, -31, -18, 19, 36, -8, 14, 16, 28, 10, 36, 17, -10, -10, -3, 1, -15, -13, 11, 1, 14, 25, 15, -37, 48, -3, 31, 9, 50, -58, 4, -17, -12, 60, -1, 5, -39, 9, 13, -13, 59, 29, 2, -27, -6, -32, -12, -28, -33, -1, -18, -7, 19, 33, -14, -16, -9, -7, -7, -24, -25, 29, 5, 14, 17, 11, -24, 25, 32, 46, -75, 2, -11, -20, 45, 19, -8, 20, -7, -1, 9, -49, 12, -23, 4, 0, -16, 0, -6, -9, 34, -15, -22, -30, -7, 10, -33, 14, -7, 0, -36, -37, -44, -10, 28, -8, -16, 40, -15, -10, -1, -10, 26, 23, -39, -25, -32, 32, -12, -35, -23, 4, -36, -2, -24, 7, -21, 4, 41, -68, -43, 18, 10, 21, -12, -3, 19, -28, 2, -44, -26, 22, 8, -16, -8, -127, -6, -17, 24, 9, -11, -22, -76, -27, -46, -54, -33, -1, -32, -49, -50, -42, -21, 0, -5, 7, -64, 10, 30, 6, -14, -24, 13, 12, -11, -29, 7, 22, -31, -14, 11, -9, -39, -10, 12, -17, -39, 6, 17, 11, -10, -3, 31, -13, 16, -10, -11, 7, -24, -47, -9, -19, 26, -5, 12, 15, 20, 11, 2, 15, -3, -6, -35, -34, 5, 35, 11, 24, -11, 69, -33, 45, -20, -13, -7, -28, 11, 7, 19, 8, -18, 6, -12, -27, 26, 35, -21, 1, -5, -35, -35, 15, -45, -29, 28, 45, -39, 
  50, 8, 17, 11, -25, 28, 2, 9, 8, -6, -44, 7, -23, -13, 13, 32, 0, -18, -36, 33, -27, -3, 14, 8, 18, -13, 41, 32, -22, -63, -28, -40, 4, 21, 3, -12, 24, -47, -26, -11, -12, 26, -12, 30, 21, -5, -10, -3, 5, 14, -31, 9, -26, 19, 5, 14, 13, 13, -20, 21, -27, -54, 7, -27, 3, 1, 34, 45, 9, 7, 32, 33, 4, 33, -32, 27, 8, -5, -14, -48, 34, 0, -11, 21, -31, 20, -20, 36, 23, 18, -15, 72, -30, -6, -12, -12, -1, 15, 3, -13, -51, 20, -84, -7, 21, 30, 7, 32, 54, -84, -2, 37, 24, -37, -2, 16, -19, -4, 14, -25, 26, 0, -71, 37, 7, -86, -22, -12, 20, -19, 10, -6, -24, 33, 13, -13, 23, 47, -9, 41, 10, 1, -31, -32, 37, -47, -10, -15, -28, 45, -27, 4, 4, -6, -37, 39, -23, -45, 7, -37, 1, -51, -27, -26, 57, -5, 36, -18, 6, 43, -33, 29, 24, -43, 30, -65, -13, -18, -13, -14, 27, 15, 6, -16, 38, 19, -104, 26, 26, -41, -27, -8, -9, -44, -34, -37, 19, 69, -10, -7, 36, 47, -77, 17, -14, -22, -30, -45, -16, -23, -18, -10, 56, 24, -8, 20, 6, 44, -64, -27, -40, -43, -10, 0, -35, 42, -21, -1, 33, 45, -57, 33, 15, 26, -49, 24, 20, -16, -46, -52, -22, -15, -16, -20, -28, 52, -6, 3, 5, 10, -68, 22, 21, -14, 13, 7, 17, -21, -17, 9, -28, 11, 0, 3, 29, 12, -62, 31, 25, 3, -23, -16, 10, -5, 22, -28, -10, 24, 3, -19, 3, -15, -15, -3, 41, 26, 20, 41, -46, -44, -4, -23, -17, 26, 22, -40, -23, 6, -125, -51, 10, -24, 11, -20, 35, -28, 3, 13, -59, 11, 47, 18, -14, 9, -111, 11, 12, -51, 8, -41, 11, -26, 12, -1, -23, 29, 6, -3, -3, 17, 58, 1, 17, -8, -15, -75, 4, 2, 1, 2, -42, 41, 4, -18, 11, 28, -12, 69, -8, -24, 2, 12, 41, -26, -13, -31, -41, 33, -33, -2, 35, 4, -37, 39, -19, -50, -9, -22, 30, -38, -3, 1, -32, -7, -3, -7, 18, 35, -85, 19, 14, -70, 0, -50, 46, -8, -22, 2, -33, -9, -10, 5, 18, 14, -85, 34, 32, -42, 18, 6, -28, -17, -45, -25, 7, 29, 70, -14, 26, 3, -21, 0, 26, -45, 8, -43, 11, -25, -16, 0, 51, 10, -3, -20, 24, 8, -79, 34, -27, -37, -15, 22, -3, -42, -30, -34, -23, 8, -30, -22, -14, -16, -51, 27, -3, 5, 0, 10, -37, -27, -18, -9, -20, 26, -8, 2, -9, 9, -83, 4, -22, -18, -2, -26, 38, -23, -35, 22, -31, 12, 15, -12, 3, -12, -58, 36, -11, -12, 23, -39, 2, 22, -17, 82, -34, 41, -14, -5, 20, -6, 27, 43, 13, -38, -3, -43, -3, 55, -1, 11, -21, 24, -18, 18, 42, 18, 0, 48, -15, -82, -51, -2, 22, 56, 35, 90, -38, 33, -29, 17, 45, -5, 34, 17, 16, -7, -10, 4, 20, 18, 11, 65, -52, 11, 19, 24, 70, -16, 52, 62, 5, -45, -15, 13, 13, 16, -26, -1, -39, -5, 31, 12, -10, 3, 46, 34, -18, -45, 12, -14, -8, 0, -20, 18, -32, 16, -7, 2, 17, 13, 5, 64, 26, -28, 30, 1, 1, -7, -33, 51, -76, 25, -14, 16, 21, 35, 29, 63, -3, -57, 5, -6, 1, 19, 1, -19, -55, 20, -5, 7, 41, 37, -9, 72, 62, -87, -7, -10, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 4,608 } };
const TfArray<1, float> quant7_scale = { 1, { 0.0041934116743505001, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -334, -1842, -709, -1143, 667, -1398, 256, -2564, -1252, -376, -196, -332, -895, -5, -316, -300, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.0001520769001217559, 0.00011193930549779907, 0.0001227461762027815, 0.00012599896581377834, 0.00012582560884766281, 0.0001122237226809375, 0.00014861879753880203, 0.00011695439025061205, 0.00012490528752095997, 0.0001071182923624292, 0.00018742684915196151, 0.00015765188436489552, 0.00010493311856407672, 0.00015532317047473043, 0.00017575728998053819, 0.00012792879715561867, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*3*8] = { 
  /* [0][0][][] */ 7,-37,35,98,-81,-34,13,14, -2,-4,6,-7,-105,-24,82,-55, -16,9,-9,38,-127,-44,58,-57, 
  /* [1][0][][] */ -113,12,-96,-6,-14,-105,-29,109, -83,-81,-116,-65,113,42,28,127, 2,-28,8,-86,-7,-63,-2,-1, 
  /* [2][0][][] */ -15,-5,-53,-26,-20,-89,7,42, 99,-19,64,20,-2,-127,12,82, -17,4,22,-63,-50,-43,88,-2, 
  /* [3][0][][] */ 66,-80,33,-29,25,-68,-55,13, 10,-127,-17,75,44,-32,-20,10, -58,-59,-64,-60,91,-77,67,43, 
  /* [4][0][][] */ -41,-68,-127,-91,-57,-71,-39,4, -57,-45,-48,-108,-42,59,-21,-68, 85,56,67,-19,-49,127,-20,-61, 
  /* [5][0][][] */ -99,65,28,63,-35,-70,-72,28, -127,117,-55,3,49,125,-117,-33, -107,107,-8,77,36,26,-104,19, 
  /* [6][0][][] */ 78,-47,10,47,-23,-49,-55,-9, 53,-96,13,-32,2,-13,-79,-14, -11,-89,-20,81,10,14,-82,-127, 
  /* [7][0][][] */ -70,-23,-111,-73,-15,127,46,-39, -17,-33,-43,12,59,117,-10,-63, -31,-23,-115,-58,77,28,60,-57, 
  /* [8][0][][] */ 34,-127,47,82,48,-47,7,56, -11,-107,-12,42,85,-83,-103,80, 0,-58,31,51,-18,-17,-105,-18, 
  /* [9][0][][] */ -29,-51,0,71,-77,36,26,36, -55,9,-26,-63,-65,54,-41,36, -19,-54,-31,120,-127,80,-22,-12, 
  /* [10][0][][] */ -97,-127,-80,-8,13,-55,92,-19, -80,-91,-85,-14,-54,-50,-13,0, -76,-70,-77,-32,-59,-29,34,54, 
  /* [11][0][][] */ -33,13,-20,127,84,24,-13,-73, -33,-52,-8,30,50,-33,1,-26, -18,-7,-32,77,-33,-32,-15,-46, 
  /* [12][0][][] */ -54,-26,-100,118,-31,-28,45,-40, 17,-51,-79,-36,-127,36,-82,-40, 75,29,104,50,81,-109,-50,4, 
  /* [13][0][][] */ 46,-14,-8,-37,-95,42,-127,-83, 86,26,-1,-36,-52,-49,-88,-63, 15,39,83,-26,18,-51,-59,3, 
  /* [14][0][][] */ 46,7,47,-5,-31,8,-8,-100, -8,39,63,21,-18,-19,1,-127, 50,-56,-5,66,-20,-45,9,-112, 
  /* [15][0][][] */ 103,32,12,-32,23,-74,-69,66, -1,-14,27,-41,-14,-127,-33,50, -23,-36,-6,-84,-47,-63,9,62, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0043927780352532864, 0.0032333938870579004, 0.0035455527249723673, 0.0036395103670656681, 0.0036345028784126043, 0.0032416093163192272, 0.0042928899638354778, 0.0033782557584345341, 0.0036079192068427801, 0.0030941376462578773, 0.0054138698615133762, 0.0045538125559687614, 0.0030310184229165316, 0.0044865473173558712, 0.005076791625469923, 0.0036952542141079903, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[8] = { -1154, -1593, -1382, -1278, -1093, -471, -1357, -746, };
const TfArray<1, int> tensor_dimension10 = { 1, { 8 } };
const TfArray<8, float> quant10_scale = { 8, { 0.00015751528553664684, 0.00019377410353627056, 0.00019826900097541511, 0.00022615531634073704, 0.00014738598838448524, 0.00015547634393442422, 0.00015527020150329918, 0.00017036835197359324, } };
const TfArray<8, int> quant10_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[8*1*3*13] = { 
  /* [0][0][][] */ -28,-28,12,-16,-64,2,41,-72,9,-31,51,-35,54, -73,-124,46,-90,-3,40,-83,-5,36,12,65,-5,-26, 5,-127,58,-107,-72,55,12,-93,39,-28,49,-50,49, 
  /* [1][0][][] */ -127,-73,-24,95,-70,74,-34,61,34,7,-46,6,29, -71,20,-38,-28,-30,74,25,35,-6,-28,15,9,-41, -68,-38,-43,43,15,-75,-45,54,4,0,-25,-7,-10, 
  /* [2][0][][] */ 49,19,-44,11,-51,-25,16,41,24,11,50,-44,32, -46,-108,18,1,-52,15,-25,18,-2,7,41,45,-30, -45,-127,-10,-51,-52,15,-74,20,53,-41,36,-48,-3, 
  /* [3][0][][] */ 3,-49,-42,-73,7,-4,40,13,48,-22,-11,-54,-30, 90,-9,10,53,-26,1,-48,-5,-2,12,75,31,41, 127,-82,60,-1,40,55,36,11,13,7,-35,-25,-81, 
  /* [4][0][][] */ 127,-80,-15,102,-91,76,31,52,-45,31,-120,11,85, 120,-73,58,-23,-60,-36,-9,5,-64,-28,-44,-60,-33, 30,2,67,29,-68,44,0,8,-19,-44,-74,53,61, 
  /* [5][0][][] */ -45,97,-33,23,5,93,24,6,-41,85,-49,86,6, 60,35,22,-95,-66,18,127,36,-11,91,-119,32,-29, 21,50,-67,75,-117,83,97,-42,48,22,-59,-81,55, 
  /* [6][0][][] */ 62,73,-75,7,51,-25,-61,-66,-44,-58,-63,-46,-113, -5,47,-28,-62,127,5,-13,-26,50,-65,33,-64,-61, 63,34,18,-118,54,-69,32,-48,32,28,-23,-2,-71, 
  /* [7][0][][] */ 22,6,60,83,29,-43,-49,71,-22,-64,48,-28,1, -50,-51,51,102,29,-87,-27,-2,-12,-64,-5,51,-63, -46,17,70,85,-69,-127,48,86,-18,-70,33,-20,-9, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 8,1,3,13 } };
const TfArray<8, float> quant11_scale = { 8, { 0.0039026078302413225, 0.0048009585589170456, 0.0049123242497444153, 0.0056032370775938034, 0.0036516438703984022, 0.0038520910311490297, 0.0038469836581498384, 0.0042210561223328114, } };
const TfArray<8, int> quant11_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,150,13 } };
const TfArray<1, float> quant12_scale = { 1, { 0.040361545979976654, } };
const TfArray<1, int> quant12_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,150,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.034619756042957306, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,150,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.034619756042957306, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,75,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.034619756042957306, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,75,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.034619756042957306, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,75,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.0325729139149189, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,75,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.0325729139149189, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,38,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.0325729139149189, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,608 } };
const TfArray<1, float> quant20_scale = { 1, { 0.0325729139149189, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,4 } };
const TfArray<1, float> quant21_scale = { 1, { 0.080587200820446014, } };
const TfArray<1, int> quant21_zero = { 1, { 20 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,4 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,11,10 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,2 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,3 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,9,8 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,5 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,7,6 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1952), (TfLiteIntArray*)&g0::tensor_dimension0, 1950, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 2432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 312, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension12, 1950, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1952), (TfLiteIntArray*)&g0::tensor_dimension13, 1200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension14, 1200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1200), (TfLiteIntArray*)&g0::tensor_dimension15, 600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension16, 600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1200), (TfLiteIntArray*)&g0::tensor_dimension17, 1200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension18, 1200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1200), (TfLiteIntArray*)&g0::tensor_dimension19, 608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension20, 608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 608), (TfLiteIntArray*)&g0::tensor_dimension21, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension22, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[11] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[11] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 23, };
const size_t tflNodes_subgraph_index[] = {0, 11, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  22, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_4_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
