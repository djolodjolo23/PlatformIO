/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 08.10.2024 17:35:36

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 8
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 5792;
#else
constexpr int kTensorArenaSize = 4768;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,1950 } };
const TfArray<1, float> quant0_scale = { 1, { 0.048513472080230713, } };
const TfArray<1, int> quant0_zero = { 1, { -14 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 150, 13, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 150, 1, 8, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 75, 8, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 75, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[2] = { -1, 608, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(16) int32_t tensor_data6[4] = { -5, 218, 119, -262, };
const TfArray<1, int> tensor_dimension6 = { 1, { 4 } };
const TfArray<1, float> quant6_scale = { 1, { 7.9415811342187226e-05, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[4*608] = { 
  -8, 12, 31, 0, -28, -20, 28, -19, 27, 13, -23, -3, 4, 76, 26, 31, -18, 4, 2, 13, -8, -23, 15, -26, 5, -13, 8, -2, -35, 68, -14, 10, -2, 5, -14, -38, -16, 16, 19, -12, 5, -27, -38, 9, -2, 1, 24, -12, 13, 7, 28, -6, -19, -19, -11, -1, -26, -28, 1, -44, -8, 22, 59, 14, 8, -21, -19, -3, -18, 25, 17, -19, -48, -5, 21, 2, -12, 31, -11, -9, -31, 21, -2, 34, 12, -8, 20, -4, 5, 4, -43, -6, -24, 1, 16, -7, 53, 27, 24, 64, -25, -12, 38, -15, -24, -24, -33, -52, -15, 45, 28, 54, 38, 13, -2, 7, 79, -5, 0, 6, -20, 1, 4, -101, -8, 0, 33, 22, 17, 21, -14, 14, 2, -64, 16, 32, 11, -6, -1, -23, -35, 9, 14, 28, 17, -27, 0, 30, -40, -11, -23, -23, -4, 14, 35, -38, -33, 26, 23, 43, -7, 27, 16, 56, -47, -8, -46, 7, -33, -11, -28, -9, -14, -31, 14, -10, 36, 6, -4, -18, -1, 27, -41, 13, -11, 5, 35, -30, 43, 51, -14, 3, 24, -1, 19, -11, 15, -14, -50, 9, -45, 9, -19, -51, -26, 37, -22, 37, -20, 6, -12, 23, 23, -18, -55, 2, -37, -12, -28, -51, -7, 24, 1, -15, 0, 3, -2, 6, -20, -17, -52, -25, -29, 12, -5, -14, -34, 33, -62, 38, 3, 30, 2, 42, 0, -36, -67, 28, -21, 15, -11, -37, -7, 53, -45, 6, 3, 10, 20, -7, 29, -6, -54, 14, -30, 2, 0, -25, 4, 38, -40, 18, -17, 10, -12, 18, -31, -20, -23, 25, -5, 14, 4, -19, -15, -44, -8, -14, -33, 16, -10, -4, -6, -25, -62, 22, 17, -14, -24, 8, -21, -41, -60, -18, -25, 23, 14, 36, -3, -18, -13, 34, 28, -23, -1, -29, -37, 23, -50, 12, -8, -17, -1, -5, 2, 16, -26, 26, 12, -20, -2, -3, -19, 20, -17, -48, -34, 20, 27, 22, -33, -38, -41, 5, -6, -4, -14, 21, 3, 4, -2, 24, -7, 26, -17, 36, 35, -14, 22, 29, 40, -18, 33, -23, -2, -10, -49, 24, -27, 13, -9, 31, -69, -8, 0, 8, 32, -5, 14, -35, -4, 36, -48, 18, -57, 7, 24, 14, 39, -12, -6, 9, 26, -6, -26, -8, -4, 10, -39, 40, -6, -1, -8, 19, -19, 3, 17, 18, 0, 1, -59, -10, -33, 7, -12, 45, 2, 28, 5, 23, -22, 21, 13, 5, 21, -15, 20, 29, -21, 12, -23, 23, -42, 4, -7, 27, 19, -15, 5, -20, -2, 24, 25, -6, 2, 11, 13, -3, -5, -14, 23, 12, 0, -6, 19, 9, 30, 5, 5, 14, -16, -13, 3, -5, 14, 0, -34, -8, -9, 35, -14, 6, 6, 12, -17, -20, 29, 33, 0, 2, -15, -32, 29, -10, -6, -2, 6, 0, 10, -15, -11, -35, 1, 9, -5, 13, 13, -34, 1, -10, 36, -21, 14, -27, 19, 24, 18, -28, -5, 47, -5, -13, -4, -22, -5, 4, -54, -15, 70, -16, -21, 5, -27, -20, -19, 24, 0, -1, 14, -24, -24, -35, 2, -35, 31, 4, -21, -4, -15, -36, -23, -9, -5, -1, 6, 0, 28, -12, -30, -38, -9, -4, -14, -24, -5, -38, -4, 26, 11, -2, -40, -39, -4, -22, -19, 12, 11, -6, -35, 12, -50, -25, 11, 10, -6, 66, -21, -45, 8, -74, 18, -4, 21, -30, -18, -17, -17, -52, 5, 38, -7, 10, 18, -16, -34, -1, 1, -27, 14, -23, -21, 34, -127, -55, -24, -3, -3, -12, 
  23, 0, -32, -2, 7, -51, -9, 14, 9, 11, 67, 28, 10, -2, -23, 31, 4, 11, -2, -7, 19, 26, -23, -19, 22, 10, 13, 21, 23, 30, -16, -17, 5, 8, 17, -26, -37, 3, -71, -12, -42, 26, 53, 2, 6, 51, -44, 8, 9, 40, 47, -6, 30, 2, -31, -13, 22, -2, -6, -13, -26, -21, -30, 52, -20, -17, 36, 25, -51, -26, 27, -12, -8, -22, -20, -34, 18, 15, -7, 28, 2, -11, -3, -1, -52, -40, -1, 13, 14, 10, -18, -30, -1, 33, -5, 21, -49, -13, 18, -19, -45, 6, 6, -10, 9, 20, 0, -24, -14, -12, -3, -2, -8, 8, 25, 17, -83, -1, -13, -10, -5, -4, -1, 3, 13, 41, -41, 6, -23, 15, -12, -5, -15, 16, 0, -22, -18, -1, -18, -13, 3, -4, -13, 11, -5, 2, 26, 23, -17, 57, 7, 12, 2, 6, 0, 2, 31, -18, 10, 23, 7, 9, 25, -20, -3, 12, 3, 16, -20, 12, 41, 17, 11, 10, -5, 5, 1, 57, 20, 5, 25, 12, -33, 20, -6, 10, -38, -17, -11, 35, -62, 12, 24, 20, 32, -21, 13, 29, -3, 40, -13, -42, -25, 22, -33, 24, -12, 12, 14, -28, 26, -40, -15, 22, -28, 8, -25, 14, 36, -27, -11, 44, -21, -4, -10, -11, 6, -38, 20, -14, -7, 4, -14, 29, 19, -98, -43, -22, -5, 10, 25, -15, -4, -26, -10, 42, 12, 7, -58, -17, -19, -8, -28, -54, 25, -62, -6, 3, -22, -32, -12, 20, 16, -2, -13, 18, -2, 20, 1, 14, 8, -80, 15, 2, 13, 12, 14, 32, -20, -3, -20, 11, 29, 13, -16, -3, -1, -40, 20, 16, 11, 4, -19, -21, -30, 10, -40, 45, 22, 23, -4, 35, -22, 7, 2, -15, 7, -28, -1, 6, 8, 5, -43, 36, 57, -35, 24, -4, 28, -13, 15, -8, -10, -21, 11, 9, 2, 13, -35, 39, 13, -41, -11, -8, 1, -3, 17, -16, 12, -39, 29, -14, -26, 20, -20, 11, 26, 2, 19, -19, 17, -23, 41, -17, 18, -34, -24, -4, 0, 18, -31, 22, -5, -26, -21, 25, 0, 4, 53, -34, -18, -59, -14, -26, -1, 27, -21, 8, -1, 7, -26, 15, 48, -38, 48, 4, -7, -37, -8, -8, -41, 8, -35, 11, 17, 20, 12, 8, 13, -26, 12, -7, -3, -52, 0, 37, -29, -8, -26, 18, 69, 20, 36, -1, 16, 5, 42, -22, -7, -9, 11, 6, -15, -3, -7, 21, 13, -9, -26, 4, -8, 40, 22, -4, 28, -7, -27, 17, -9, -17, -7, 18, 49, -6, -13, -16, -18, -3, 3, -13, 16, -11, -16, -17, 3, 27, -5, 6, 81, 3, 36, -1, -34, 1, 25, -10, 13, 12, -16, -17, -28, 27, -13, -2, 9, -16, -35, -5, -1, 25, 21, -2, 18, 6, 1, -2, 8, 41, -25, -14, -26, 8, -4, 32, -16, -3, 1, -15, -6, 9, -20, 12, -36, -8, -46, -37, 49, 4, -20, 26, -14, 19, -14, 49, -33, -8, 65, 33, -18, -29, -6, -25, -13, 5, -47, -12, -14, -16, -16, 5, -5, 0, 36, 16, -25, 0, -48, -33, -22, -14, 12, 5, -8, 23, 13, 16, 24, -20, -7, 48, -24, -24, -13, -8, -28, -29, -10, 16, -34, 44, 1, 3, 24, -74, 36, 29, -29, 20, -37, -38, -11, -16, 6, 2, -19, 23, -2, 25, 5, 5, -12, -12, -31, 16, -20, 18, -37, -8, -11, -5, -19, 18, -24, 13, 60, 43, -17, 21, -17, -26, 10, 8, 36, -2, -41, -68, 21, -2, 
  -10, 39, -14, -32, 33, -30, -19, 8, -7, -23, 32, -12, -15, -53, 6, -35, 47, -9, -29, 10, 24, -9, 9, -14, -27, -35, -37, -25, -32, -20, 29, 10, 0, 6, 17, 47, -6, -49, 34, 20, 24, 11, -27, 2, -19, -39, -7, -19, 13, -27, -21, -21, -7, -5, -21, -18, 0, 21, 8, 3, 2, 29, -25, -30, 17, 4, -23, -22, 8, -1, 0, -2, -4, 18, 35, 9, -18, -30, 36, -36, 0, -6, -21, -7, -9, 0, -2, -16, -19, 11, 23, -25, -36, -71, 10, -67, -3, -46, -31, -14, 51, -15, -17, 24, -19, 32, -14, -14, -27, -3, 25, -67, 15, -8, -54, -3, -17, -23, 23, 19, -3, -31, 7, 28, 10, -11, 2, -42, 22, -6, 16, -27, 36, 10, 21, -20, -28, 2, -12, 11, -4, -46, 20, 6, 17, 1, -10, 31, 15, 1, 44, 18, 24, -13, 13, -9, -10, -28, 6, -36, -21, -4, 15, 9, 0, -16, 48, 24, 7, 3, 10, -29, -8, 34, 49, -10, 27, -27, -50, 6, -21, -32, 40, 1, -17, 20, -6, -8, 18, -7, 22, -40, -33, 5, -17, 24, -66, -33, 30, 9, 34, -18, -25, 13, 13, -29, 38, -40, 20, -29, -33, 6, -30, -21, 38, -29, 28, 7, -55, 7, -13, -37, 29, -15, 12, -8, 8, 41, 5, -6, 31, -8, 10, -20, 37, 9, 30, -13, 31, 6, 1, 40, 32, 29, 6, -21, 60, 6, 16, 18, 10, 14, 18, -30, 7, 25, 3, 16, -12, 8, 14, -31, 49, -5, 16, -19, -5, 22, -3, -20, 3, 20, -8, 8, -9, 10, 35, -7, 54, 4, -7, -13, 0, -34, 14, -21, 36, 1, -19, 15, -12, -7, -8, -38, 39, -14, -2, 21, 7, 27, -1, -30, 11, 33, -44, -6, -5, -6, -9, -14, -3, -7, 16, -18, -3, 28, 41, 12, -11, 55, 4, 3, 24, 13, -9, -30, -11, 14, -4, 0, -16, -21, -47, 5, -14, 51, -38, 1, 6, 8, 37, -31, 20, -18, -21, -15, -11, -40, 10, 22, 23, 41, -38, 0, 9, 53, -21, -29, 40, 15, 17, -19, -39, 18, -3, 35, 2, 26, 7, 31, 0, 43, 55, -36, -8, -11, 25, -29, -28, 30, 6, 14, 10, 38, -29, 34, 6, 18, 2, 13, 10, 16, 7, -13, 40, -9, 23, -28, 11, 13, 5, 44, -4, 11, -31, -12, 6, 29, -9, -7, -34, -1, -31, 27, -12, -26, -29, -10, -7, 14, -23, -32, 1, 10, 29, 7, -17, 0, 36, 37, 35, -43, 22, -19, -3, 21, 15, -14, 41, 1, -2, 7, -39, 8, -19, 20, 1, 2, 10, -25, 9, 27, -18, -27, 2, -3, -16, -13, -39, -13, 13, -29, -11, -6, 15, -7, -23, -26, 18, -42, 21, -5, 18, 26, -14, -21, 15, -38, 34, 2, -19, -43, -33, -26, 11, -27, -9, -9, 1, 36, -34, -30, 35, -10, 23, -7, 0, -16, -24, 0, -29, -23, 48, 14, -10, -3, -101, 4, -14, -20, -11, 21, -18, -66, -13, -33, -32, -25, -15, -28, -48, -21, -13, -35, 19, -21, -11, -25, -24, 21, 3, 34, -38, -7, -2, -1, -23, -20, -29, -28, -11, 20, -15, 1, -20, 4, -7, -26, 46, 15, 47, 6, -9, 30, -25, 6, -3, -20, 6, -5, -18, -9, -5, 11, -5, -17, -13, 24, 1, -5, 38, -7, -1, -12, -12, -16, 22, 8, 4, 25, 72, -4, 18, -13, 0, -3, -35, 14, -10, 4, 13, 5, 15, 22, 15, 3, -6, -48, 22, -11, -20, -18, 6, -16, -36, 50, 18, 30, 
  12, -26, 3, -16, -6, 19, 7, 4, -18, -26, -54, 17, -21, -37, 25, -14, 5, -19, -32, 51, -10, -18, 8, 31, 9, 12, 22, 20, -9, -33, -31, -47, 11, -7, -23, -21, 51, -22, -15, -5, -13, -18, -26, 3, 11, 0, 1, -22, 15, 11, -13, 49, -14, 11, 21, 12, 20, 24, 17, -9, -28, -9, -7, -21, -7, 27, 31, 1, 34, 22, -12, 19, 12, 28, 6, 12, -14, -10, -1, -42, 3, 5, -13, 31, 40, 30, -18, 19, 27, 23, 39, 35, -2, 0, -20, -35, -15, 16, 4, -32, -9, 7, -66, -17, 25, 27, 29, 56, 51, -42, 1, 18, -15, -36, -21, -9, 4, -17, -6, -28, 37, 26, 27, 51, 10, -73, 5, -38, 4, -8, 8, 4, -29, 31, 11, -17, 49, 36, 28, 44, 19, -8, -7, -18, 34, -19, 2, -14, 32, 37, -14, 10, -13, -9, -27, 27, -23, -55, -6, -48, -22, -42, -23, -46, 35, 24, 6, -28, 1, 13, 6, 3, 39, -90, 22, -12, -1, -19, 3, -16, 5, 22, 24, -24, 34, -12, -22, 54, 29, -21, -6, 5, -23, -34, -6, -45, 10, 21, 5, -31, 38, 28, 17, 5, -5, -9, -24, -42, -16, -27, -27, 8, -3, 36, -19, 14, 5, 34, -32, -18, -15, -10, -37, -21, -52, 21, -17, -11, -10, 27, -25, 14, 22, 4, -9, 58, 4, -28, -23, -18, -24, -20, -20, -16, -34, 28, -22, -16, -13, -1, -12, 57, 30, -23, 9, -11, 8, 0, -7, -6, -3, 33, -8, 9, 5, 23, 3, 27, 32, -13, -15, -14, 8, -15, 32, -39, -25, 37, 15, 6, -6, 6, -3, -4, 56, 21, 12, 52, -17, -34, 9, -41, -18, 20, 20, -25, -17, -29, -27, -34, -10, 14, 29, -10, 40, -17, -2, -9, -32, 39, 50, 24, -6, -13, -57, 8, 5, -24, 22, -28, -13, -14, -5, -37, -24, 24, 12, -10, -7, 16, 30, 15, 39, -10, -19, -54, 11, -6, 6, -1, -65, 31, 33, 7, -14, 12, -11, 41, -1, -19, -17, -17, -10, -13, -13, -35, -5, 60, -18, 15, 26, 5, 16, -2, -7, -35, -21, -64, -19, -6, 9, -15, -16, 6, -24, -6, -3, 18, -28, 30, 35, -51, 5, -25, 4, -9, -17, 16, -19, 3, -26, 6, -7, 3, -48, 16, 9, -51, 16, -48, -9, 11, -12, -7, 20, 6, 28, -21, 14, -13, -2, 5, 17, -46, 1, -10, -15, -8, -19, 0, 35, 18, -14, 1, 10, -8, -23, 5, -1, -17, -41, -15, -26, -14, -18, -19, 8, 17, -22, -23, -15, -25, 6, 15, 26, -31, -33, -31, -9, -19, -4, 4, 13, 0, -17, 15, 15, -5, -36, 7, -5, -3, 13, -10, 26, -1, -32, 21, 2, -12, 25, -4, 0, 10, -11, 45, -13, -27, -4, -26, -3, 37, 5, 54, -39, 17, -14, -15, 5, -14, 30, 34, 1, -20, 11, -7, 8, 47, -14, 36, -8, 3, -27, 21, 37, 22, 20, 37, -14, -56, -13, -18, 27, 37, 13, 63, -39, 30, -31, 23, 34, 16, 28, 13, 19, -36, 20, -1, 14, 31, 29, 30, -7, 26, 14, 15, 56, 1, 51, 65, 3, -60, 6, 1, 20, 12, -34, 14, -13, -7, 4, -15, 21, 19, 1, 44, 3, -29, 34, -24, -9, -12, 8, 55, -18, 23, 20, 8, 2, 29, 49, 52, 25, -44, 29, -26, -4, 2, -32, 28, -52, 13, -9, 12, 23, 13, 32, 67, 14, -50, 0, -14, -14, 4, -8, -22, -12, 12, -43, 23, 34, 3, 35, 46, 36, -70, -3, -31, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 4,608 } };
const TfArray<1, float> quant7_scale = { 1, { 0.0036969692446291447, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -14, -1135, -551, -935, 310, -377, -245, -1483, -1307, -193, 203, 228, -267, 204, -206, 287, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00011417725181672722, 0.0001269284839509055, 9.3134527560323477e-05, 0.00011610335786826909, 0.00011132418876513839, 0.00010508049308555201, 0.00013243719877209514, 0.00010601866233628243, 0.00010196168295806274, 9.3112073955126107e-05, 0.00012074241385562345, 0.00013042549835518003, 0.00013041739293839782, 0.00012522209726739675, 0.00014351194840855896, 0.00010968167043756694, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*3*8] = { 
  /* [0][0][][] */ 12,-7,68,37,-30,-44,25,0, -50,4,-20,-21,-80,5,85,-106, -22,42,-4,10,-112,-78,127,-16, 
  /* [1][0][][] */ -79,22,-37,20,-13,-90,-8,31, -45,-31,-47,-34,95,31,67,127, 16,-11,-12,-100,3,-84,21,-34, 
  /* [2][0][][] */ 1,46,-80,-12,-36,-109,5,67, 110,16,66,57,-10,-127,-17,106, -67,44,53,-120,-68,4,87,-11, 
  /* [3][0][][] */ 49,-78,13,-32,78,-57,-49,48, 18,-112,-32,77,33,-64,-27,65, -63,-66,-127,-56,80,-51,75,54, 
  /* [4][0][][] */ -48,-60,-75,-60,-114,-73,6,83, -62,-21,-49,-78,-7,46,39,-31, 79,61,108,6,-73,127,-17,-23, 
  /* [5][0][][] */ -69,93,15,78,-26,-100,-49,87, -109,83,-61,-23,43,110,-110,-36, -117,127,36,80,-5,11,-95,40, 
  /* [6][0][][] */ 104,-35,50,54,-27,-31,-24,-5, 65,-78,35,-34,1,-10,-33,-14, 10,-105,-52,59,46,28,-127,-116, 
  /* [7][0][][] */ -88,24,-24,-93,-100,93,72,-2, 4,24,17,41,51,44,27,2, -38,26,-127,-82,65,37,90,-4, 
  /* [8][0][][] */ 50,-124,65,97,42,-25,12,94, -17,-99,-98,36,104,-45,-97,127, -6,-47,111,78,4,73,-86,-18, 
  /* [9][0][][] */ -18,-57,63,81,-91,52,104,9, -51,-44,-23,-84,-50,26,-43,28, -32,-55,-62,127,-78,26,-37,72, 
  /* [10][0][][] */ -65,-51,0,34,14,-42,127,-59, -96,-58,-50,-14,-72,-53,-26,17, -45,50,9,44,-118,34,-3,109, 
  /* [11][0][][] */ -54,14,-43,127,62,43,-17,-63, -28,-23,72,40,93,-54,-9,9, -43,-22,-43,86,-29,-50,-54,-36, 
  /* [12][0][][] */ -85,16,-65,91,-7,-8,73,-26, 9,-20,-66,-13,-68,52,-51,-18, 24,32,69,18,9,-127,-89,48, 
  /* [13][0][][] */ 44,11,0,-63,-124,28,-123,-42, 110,82,-16,-23,-127,-89,-105,-60, -5,39,73,-44,23,-104,-62,80, 
  /* [14][0][][] */ 22,-15,44,-42,-21,0,9,-90, -23,30,79,30,1,-43,33,-127, 79,-98,25,93,33,-70,-14,-99, 
  /* [15][0][][] */ 127,51,3,-50,47,-95,-40,70, 31,-29,59,-74,35,-101,9,38, 4,-63,44,-83,-84,-57,13,46, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0029760366305708885, 0.0033083984162658453, 0.0024275567848235369, 0.0030262407381087542, 0.0029016714543104172, 0.002738929120823741, 0.0034519832115620375, 0.0027633826248347759, 0.002657637232914567, 0.0024269716814160347, 0.0031471580732613802, 0.0033995481207966805, 0.0033993367105722427, 0.0032639212440699339, 0.003740647342056036, 0.0028588590212166309, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[8] = { -565, -1127, -754, -590, -613, -133, -1887, -360, };
const TfArray<1, int> tensor_dimension10 = { 1, { 8 } };
const TfArray<8, float> quant10_scale = { 8, { 0.00016274854715447873, 0.00018872568034566939, 0.00015201130008790642, 0.00021078497229609638, 0.00015441184223163873, 0.00017060352547559887, 0.00012570001126732677, 0.00015378164243884385, } };
const TfArray<8, int> quant10_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[8*1*3*13] = { 
  /* [0][0][][] */ -27,-25,-5,-24,-72,35,37,-23,-19,8,54,-92,46, -76,-127,42,-85,-9,69,-83,15,9,42,58,-11,6, -30,-109,53,-114,-87,89,3,-78,80,7,52,-28,55, 
  /* [1][0][][] */ -127,-58,7,86,-83,65,-43,69,24,-2,-33,5,28, -81,31,12,-20,-44,73,34,54,5,7,6,39,-58, -105,-37,-19,88,-6,-71,-39,42,14,6,-33,-8,-3, 
  /* [2][0][][] */ 40,110,-90,-7,-69,-84,45,47,-46,40,106,-127,15, -86,-111,28,9,-73,-4,-15,68,-57,8,-7,10,-57, -63,-124,-3,-95,-36,11,-118,30,97,-42,66,-55,4, 
  /* [3][0][][] */ 11,-50,-35,-91,19,-36,70,13,49,-56,12,-64,-17, 76,8,41,81,17,24,-45,1,5,4,64,28,58, 127,-81,65,2,28,43,41,18,19,26,-56,-51,-112, 
  /* [4][0][][] */ 118,-61,32,125,-56,-15,-5,71,-27,30,-94,62,82, 88,-101,43,-6,-57,-67,-25,-17,-94,-42,-37,-81,-20, 28,12,54,19,-70,-7,-35,12,82,-15,-127,71,-12, 
  /* [5][0][][] */ -41,69,6,30,37,33,-12,-5,-40,68,-34,69,-10, 42,14,29,-82,11,2,102,-48,-6,97,-74,11,-94, 18,68,-75,64,-127,81,56,-20,67,-6,8,-45,57, 
  /* [6][0][][] */ 74,107,-64,41,-22,-43,-112,-97,-127,-122,-89,-11,-93, -50,55,-1,-66,123,-4,-49,-44,27,-92,17,-65,-57, 80,51,50,-87,88,-87,44,-72,-24,78,-73,50,-72, 
  /* [7][0][][] */ 33,-48,48,61,58,-17,-99,48,-29,-59,98,-81,41, -114,-64,11,58,92,-91,-38,-35,-17,-96,2,73,-56, -30,29,62,121,-65,-127,70,91,-26,-87,55,-19,3, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 8,1,3,13 } };
const TfArray<8, float> quant11_scale = { 8, { 0.0033547084312886, 0.0038901704829186201, 0.0031333831138908863, 0.0043448749929666519, 0.0031828652136027813, 0.0035166216548532248, 0.0025910332333296537, 0.0031698751263320446, } };
const TfArray<8, int> quant11_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,150,13 } };
const TfArray<1, float> quant12_scale = { 1, { 0.048513472080230713, } };
const TfArray<1, int> quant12_zero = { 1, { -14 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,150,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.038365539163351059, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,150,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.038365539163351059, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,75,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.038365539163351059, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,75,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.038365539163351059, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,75,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.021481329575181007, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,75,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.021481329575181007, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,38,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.021481329575181007, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,608 } };
const TfArray<1, float> quant20_scale = { 1, { 0.021481329575181007, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,4 } };
const TfArray<1, float> quant21_scale = { 1, { 0.06068083643913269, } };
const TfArray<1, int> quant21_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,4 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,11,10 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,2 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,3 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,9,8 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,5 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,7,6 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1952), (TfLiteIntArray*)&g0::tensor_dimension0, 1950, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 2432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 312, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension12, 1950, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1952), (TfLiteIntArray*)&g0::tensor_dimension13, 1200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension14, 1200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1200), (TfLiteIntArray*)&g0::tensor_dimension15, 600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension16, 600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1200), (TfLiteIntArray*)&g0::tensor_dimension17, 1200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension18, 1200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1200), (TfLiteIntArray*)&g0::tensor_dimension19, 608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension20, 608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 608), (TfLiteIntArray*)&g0::tensor_dimension21, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension22, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[11] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[11] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 23, };
const size_t tflNodes_subgraph_index[] = {0, 11, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  22, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_4_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_4_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
