/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 08.10.2024 17:20:32

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 8
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 5792;
#else
constexpr int kTensorArenaSize = 4768;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,1950 } };
const TfArray<1, float> quant0_scale = { 1, { 0.045889522880315781, } };
const TfArray<1, int> quant0_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 150, 13, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 150, 1, 8, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 75, 8, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 75, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[2] = { -1, 608, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(16) int32_t tensor_data6[4] = { -42, 62, 42, -19, };
const TfArray<1, int> tensor_dimension6 = { 1, { 4 } };
const TfArray<1, float> quant6_scale = { 1, { 8.7508706201333553e-05, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[4*608] = { 
  -13, -3, 3, -21, -36, -35, 10, -33, 13, -13, 10, 20, -5, 82, 45, 23, -55, -44, 0, -5, 18, 3, 39, -30, 4, -1, 22, -15, -29, 34, 20, 28, -23, 5, -15, 9, -18, -8, 30, -11, -14, -21, 9, 8, 6, 5, -9, -2, 17, 25, 22, 10, 8, -13, 8, 11, -13, -3, 1, -35, -35, -21, 17, 47, -20, -22, -4, 15, -10, 3, 26, -28, -5, 3, 42, -9, -22, 45, -37, -9, -8, 27, 29, -24, 37, 12, 27, -2, 2, 7, -4, -35, -10, -11, 23, -16, 38, 24, 29, 71, -10, 1, 48, -7, -3, -31, -41, -8, -23, 56, 63, 65, 42, 38, 14, 23, 67, -2, -26, 3, 15, -24, 40, -61, 19, 49, 35, -1, 38, 41, -17, -45, 41, -10, 11, 16, -5, -55, -61, 15, -55, -2, 25, 54, 5, -22, -11, 0, -12, -10, 4, -24, -28, -19, -12, -25, -54, 24, 27, 35, -26, 15, 21, 36, -52, -2, -9, 9, -21, -31, -36, 9, 13, -13, 14, 0, 31, 18, 2, -7, 10, 21, -4, 16, -25, -2, -21, -32, 0, 28, -28, 14, -3, 20, 19, -31, 8, -6, -37, 10, -46, -28, -32, -38, -76, 51, -33, 21, -31, 8, -16, 14, 21, -9, -48, -16, -23, 1, -58, -29, 1, 38, -30, -31, -9, -3, -12, -5, -57, 13, -30, -32, -20, 4, -48, -11, -39, 27, -53, 56, 3, 26, 21, 2, -25, -31, -37, 21, -38, 38, -31, -20, -7, 44, -23, 10, 19, 8, 30, -11, -25, -20, -33, 7, -33, 12, 5, -2, -3, 97, -22, 56, 9, 30, 20, 25, -38, -31, 30, 21, 10, -11, -22, -3, -21, -7, -7, 6, -13, 27, -13, 2, -19, -22, -31, -3, 11, -43, -52, 7, -47, -34, -38, 8, -38, 5, 8, 28, -66, 2, -40, 20, 22, -46, -35, 17, -45, 47, -67, 18, 15, -14, -1, -1, -46, 12, 43, 22, -8, -48, -43, -27, -43, 27, -39, 3, -21, 10, 28, 30, -61, -17, -52, -9, -26, -75, -74, 18, -1, -11, 8, -1, -4, 20, 1, 30, -6, 18, 26, 12, 15, -33, 16, -8, -9, -1, -33, 29, -45, -1, -2, 30, -90, -5, 40, 7, 35, 1, -42, -8, 8, 37, -21, 59, -40, 14, 34, 32, -21, -24, 3, 12, 22, 21, -40, 16, 36, 10, -46, 68, 23, 15, 4, 3, -24, -41, 23, 34, 0, -15, -83, -17, -21, -1, -1, 44, -8, 2, 13, 9, -91, 8, 42, 10, 34, -4, 29, 58, -3, 33, -32, 25, -4, 1, -10, -30, -8, -34, 33, -15, -5, 26, 7, -7, 13, 44, -19, 1, -6, -48, 12, -32, 47, -19, 48, -11, 27, 22, 45, 8, 16, -17, 13, 19, -4, -26, -30, -16, -7, 26, 8, 1, -4, 25, -39, -12, 44, 33, 24, 24, -2, -38, 20, -8, -34, -31, 10, -7, 1, 5, -26, -28, 3, 0, -8, 31, 21, -33, 13, 16, 18, 0, -31, -27, 15, 12, -3, -30, 23, 34, -21, 2, 19, -12, -2, 32, 16, -7, 25, -18, -15, -7, 7, -26, -26, -35, 20, 9, -14, -36, 8, -59, 14, -35, 30, -12, -18, -11, -19, -17, -16, -42, 17, 19, 10, -64, -10, -30, -14, -32, 14, -12, -40, -14, -32, -26, 12, 34, 38, 7, -7, -51, -2, -35, -41, 11, 0, -25, -52, -41, 1, 24, -9, 14, 3, 56, -23, -15, -3, -84, 69, -23, 15, -26, -17, -24, 13, -83, 25, 9, 3, 22, -19, -14, 7, -19, -88, -23, 8, -18, -4, 24, -80, -13, -22, 10, 0, -4, 
  0, -22, -24, -20, 36, -27, -3, 0, 2, 36, 68, 10, 13, 2, -44, 9, 17, 18, -2, 11, -25, -7, -16, -13, 18, 42, 14, 17, 1, 49, -36, -8, 24, 20, 15, -30, -32, -10, -79, 2, -13, 11, 11, 34, -9, 78, -38, 0, 21, 3, 22, 0, -8, -35, -10, -12, 8, -9, 34, -44, -23, 26, 4, 18, -27, -19, 13, -25, -29, -39, 7, -26, -15, -9, -60, -68, 43, -6, -24, 16, -23, -8, -28, 24, -71, -60, -25, 7, 17, -14, -66, -48, -39, 27, -34, 0, -50, -14, 10, -28, -51, -5, -33, -24, 26, 23, 10, -16, -19, -17, -10, -23, -36, -18, -6, 33, -127, -33, 7, -19, 1, 9, 24, 15, -6, 20, -34, 10, -22, 32, -1, 37, -22, -17, 11, 0, 13, 35, -5, -41, 2, -7, -50, -24, 7, 9, 31, 44, -53, 43, 0, 18, 21, 28, 4, 17, 26, -8, -4, 18, 16, 17, 8, -15, -25, 14, -16, 30, -7, 37, 32, 18, -10, -1, -14, -26, 0, 43, 15, 16, 17, 8, -32, 27, -8, -11, -19, 4, -8, 52, -53, 12, 24, 6, 31, -22, 39, 6, 13, 31, -11, -5, 8, -16, -3, 40, 0, 18, 33, -46, 14, -25, -4, 6, -24, -5, -20, -25, 12, -27, -36, 46, -13, 41, -10, 2, -3, -32, 31, -11, -14, 3, -10, 3, 15, -73, -77, -21, -5, 1, 22, 7, 4, 3, 21, 42, -32, 27, -52, 14, 24, -28, -27, -35, 7, -73, 1, 1, -9, -9, 31, 7, -9, 0, -5, 28, 39, 5, 28, -28, -24, -66, 4, 5, 1, -12, 22, 21, -4, 17, -8, 33, 45, -1, -9, -56, -16, -18, 23, 7, -3, -30, 20, -45, 4, 26, -30, 56, 19, 18, -26, 27, -47, 13, 32, -13, 15, -18, 25, -41, 56, 25, -34, 35, 23, -45, 31, -29, 16, -15, 3, 0, -11, -11, 59, -21, 2, 18, -17, 49, 36, -16, -7, -1, -20, -28, 12, 15, -7, -29, 26, -62, 11, 32, -18, 43, 58, -40, 17, -1, -31, -7, 23, 10, 23, -18, 1, -53, 22, 31, -16, 16, -15, -29, -29, 16, -61, 18, 58, 15, -25, -39, 25, -53, -25, 35, -37, -17, -5, -1, -36, -3, -6, -39, 31, 25, 0, -66, 70, -26, -5, 22, -24, 9, 24, -31, -22, 5, 10, -16, 19, -4, -13, -39, 14, 14, -24, 15, -40, 17, 51, 7, 20, 48, 1, 21, 42, 15, -4, 6, 32, -28, -24, 17, 1, -3, 3, -14, -28, 7, -10, 26, 14, 14, 52, 31, -13, -1, -11, -14, -10, 18, 33, -20, -27, -39, -40, 3, 15, 6, 30, 19, -18, -32, 9, 35, 7, -26, 36, 15, -9, -33, -22, 21, 33, -12, 1, -4, 9, -41, -60, 22, -1, 22, 0, -13, -35, 2, -12, -11, 0, 15, 13, -10, 9, -13, 23, 25, 29, -8, 0, -2, 6, 3, -5, -7, 0, -59, -33, 0, -13, -13, 50, -15, -21, -11, 25, -19, -31, 13, 10, 7, -17, -7, -43, -24, 21, -2, 35, -60, -7, -41, -35, -11, -18, 3, -37, 11, 3, -11, -20, 9, 16, 0, 33, -10, -63, -28, -12, -62, -2, 50, -35, 45, -12, 40, 57, 1, -6, 26, -15, 9, -27, -15, -44, -28, -27, -5, -57, 51, -14, 20, 24, -42, 33, 11, 1, 17, -23, 23, -8, -37, -6, 16, -20, 40, -33, -16, 19, 23, -5, 6, -24, 2, -8, 41, -26, 15, -21, 33, -35, 37, -44, -11, 58, 58, -12, 22, -12, -31, 0, 21, -1, -57, -87, -54, -4, 18, 
  -8, 22, -6, -36, -11, -41, 19, 13, 4, -20, 10, -25, -14, -71, 15, -30, 21, -11, -55, -13, 16, -32, -8, -24, -39, -40, -31, -78, 7, -10, 21, -39, -14, -44, 4, 24, -22, -22, 39, 15, 16, 5, -12, -26, 7, -61, 27, -3, 32, -24, 7, 17, 31, 16, -23, -20, 16, 21, 39, 11, -19, 27, 9, -17, 53, 16, -17, -21, 25, 25, 1, 0, -25, 11, 17, 16, -11, -41, 77, -30, 12, 12, -13, 41, -20, -36, 37, -14, -6, 23, -3, 45, -6, -60, 31, -60, 27, -24, -9, -9, 53, -72, 18, 20, -60, 46, 13, -34, -11, -22, 13, -11, 39, -21, -53, -36, 42, -43, 34, 21, -14, -4, -12, 5, 12, -28, -10, -23, -16, -13, 8, 5, -31, 15, 14, -36, -22, -3, -1, 28, 6, -7, 13, -25, 30, 4, 12, 18, 30, 31, -2, 23, 1, -11, 32, -20, 52, -35, 12, -72, -2, 5, 17, 10, 13, -3, 33, 14, 7, -3, 22, -39, -5, -29, 69, 0, 14, -7, -39, -25, -13, -37, 28, 4, 15, 44, 44, 4, 64, -2, 32, -45, -6, 2, 1, 53, -40, -62, 13, -5, 43, 9, -15, 52, 24, -28, 16, -25, 8, -18, -21, 2, -44, -22, 62, -2, 20, 33, -15, -11, 20, -70, 58, -65, -14, -17, 10, 48, -2, -3, 43, -3, 28, 8, 58, 24, 62, -12, 40, -5, -43, 30, 18, 38, -21, -22, 75, 4, 36, 1, -10, 15, 11, -35, -15, 25, -35, 27, -18, 4, 38, -18, 24, 1, 17, -24, -38, 22, -9, -43, 3, -4, -16, -12, -23, 26, 14, -12, 30, 3, -17, -4, -24, -15, 35, -19, 17, -38, -61, 19, 11, 9, -10, -39, 35, -11, 3, 9, -7, 1, 50, -15, 20, -2, -31, -7, -5, -2, -19, 6, 17, -16, 30, -6, 8, -4, 32, 19, 2, 26, -4, -7, 17, 12, 5, -15, -28, 11, 17, 3, 12, 14, -29, -46, 0, 5, -28, 9, 9, -4, -4, -38, -2, 2, -24, 5, -8, 7, 23, 17, 47, 7, -26, -6, 2, 43, -61, -14, 30, 18, 43, -16, -35, 12, 15, 25, 6, -6, 19, 39, 26, 42, -79, -11, -24, -16, 24, -29, -9, 21, 24, 6, 10, 38, -12, 3, -4, 24, -35, 9, -19, 13, -16, -19, 42, -16, 8, -71, 9, -2, -32, 46, -2, 7, -64, 12, -15, -2, 21, 21, 3, 8, -9, -22, -54, -18, -37, -4, -31, 19, 6, -4, 4, -17, 23, 27, -5, -30, -1, 53, 30, -57, -5, -24, -22, 38, -23, 21, 27, -19, -17, 8, -17, -2, 1, 38, 31, -19, 6, -19, 14, 31, -19, -10, -5, -9, -15, -4, 6, -15, 11, -2, -24, -32, 22, -4, -29, -49, -17, -10, 0, -13, 4, 3, 17, -28, -11, -49, -7, 7, -16, -69, -25, -7, 4, -5, -6, -20, -64, 36, -43, -67, 1, -16, 8, -5, 14, 17, 1, 5, -7, 6, 10, 17, -30, -4, -51, 31, -23, -10, -2, 13, -21, -34, -58, -45, -58, -12, -5, -10, -39, 18, 13, -6, 3, -1, 4, -35, -24, 33, 16, 37, -43, 1, -5, 14, -20, 0, -11, -16, -3, -13, -41, -27, -14, 32, -14, -44, 31, -4, 19, -17, 3, 42, 14, -4, 10, -16, 19, -17, -49, -2, 4, 38, -8, 1, -15, 46, 24, 23, 19, 3, 50, -41, -48, -32, 41, 6, 27, 24, -13, -10, 19, -4, -17, -20, -103, 32, -15, 1, 42, -2, 60, 25, -10, -30, 13, -26, 30, -16, -51, -27, -38, -41, -2, 23, 61, 17, 
  35, 26, 18, 30, 2, 27, -25, 32, -5, -20, -91, 17, -18, -35, 26, 16, 50, 29, -6, 64, 13, 2, -10, 37, 18, -40, -15, 69, -42, -28, -29, -40, 27, 16, -6, -31, 83, -11, -32, -4, -10, 0, -40, -22, -11, -29, -1, -35, -20, 25, -16, -12, -24, 24, -17, -2, 5, 10, -59, 6, 21, -21, -34, -47, -1, 19, 30, 32, -16, 22, 1, 35, 5, 9, 25, 36, -22, -18, -4, -45, -9, -30, -35, 14, 21, 49, -46, 22, 14, 29, 55, 17, -5, -5, -9, -14, -19, -1, -21, -41, -18, 40, -82, -2, 18, 15, 0, 17, 45, -44, -12, -46, -15, -29, -11, -15, -25, 36, -11, -14, 22, 14, -7, 28, 6, -85, 3, -44, 27, -46, 6, -11, 11, -6, 6, -7, 27, 44, 56, 0, 31, -21, 27, 21, 19, -37, -21, 4, 33, 14, 15, -5, 8, -19, 0, 17, -57, -56, -9, -5, -23, -55, -14, -23, 56, -2, 9, -32, -23, 11, 4, -4, 22, -19, 14, -1, 9, -36, -6, -8, -15, 28, -2, -34, 17, -5, -4, 10, 26, -27, 9, -10, -21, -42, -23, -39, -32, 54, -9, -12, 31, 10, -20, 2, 7, -55, -8, -49, -12, -25, -23, 3, -5, 35, -49, 20, -4, 26, -5, -17, -34, -18, -47, -19, -5, 28, 3, 1, -3, 7, -43, 22, -1, -2, 10, 27, -9, -23, -26, -31, 9, -24, -27, -2, -3, 34, -35, -22, -13, -37, -22, 55, 39, -33, 27, -5, 22, -5, -23, -5, -22, 42, 4, 11, 3, -2, -19, 15, 13, -25, -1, -37, 3, -23, 26, -41, -7, 58, -34, 0, -25, 2, 28, -32, 40, 26, 44, 47, -10, -40, 4, -37, -53, 36, -18, -16, -20, 4, 8, -1, -6, 6, 32, -9, 7, 10, -3, 2, 16, 39, -3, 27, -9, -9, -2, 10, 6, -53, 30, -1, -13, -21, 1, -45, -46, 36, -29, -9, -18, 30, 11, -22, 43, 7, 11, -39, -8, -36, 20, -12, 0, 45, 28, -15, 13, 15, 5, 36, 0, -25, -5, 28, 0, -27, -32, -38, 29, 44, -47, 14, 16, 22, 38, -1, -2, -37, 6, -74, -12, -33, -22, -7, 84, 2, -47, -8, 5, 32, 5, 23, 17, -31, 41, -84, 5, 1, -28, 9, -8, 29, -52, -11, 16, -11, -46, 45, 19, -4, 29, -58, -22, -17, -27, -7, 46, 48, 32, -39, 0, -27, 9, 5, 1, -63, 50, -66, -3, -27, -13, -16, 32, 41, -41, -1, -4, -13, -52, -13, 14, -65, -36, -1, -23, -28, -25, -14, 59, 31, -31, -13, -1, -27, 26, 30, 9, -70, -5, -27, -21, -8, -15, 10, -39, 5, -55, 31, 7, -7, -71, 3, 6, -4, 11, -34, 27, 18, -12, 59, 12, -12, 51, 14, 7, -1, -16, 31, -1, -44, 31, -14, 5, 50, 5, 49, -2, 35, -44, 17, 21, -34, 18, 61, 20, 24, 16, -20, -12, 54, -28, 16, -28, -16, -31, 29, 32, 16, 44, 37, -24, -35, -27, -30, 1, 42, 34, 53, -36, 32, -57, 28, 18, 4, -22, 11, 10, 2, 1, -29, 22, 49, -1, 35, 17, 28, -52, 17, 59, -10, 30, 70, -13, -42, 24, -33, 34, 15, -21, 22, -36, 20, 6, -20, 39, 8, 8, 37, -15, -25, 11, -36, 4, -22, -10, 0, 18, 20, 9, 5, -15, -1, 12, 12, 19, -50, 40, -40, 13, 13, -48, 23, -22, 15, -10, 13, 19, 17, 44, 55, 11, -63, -22, -45, 6, 16, -23, -1, 38, -4, -46, 32, 45, 0, 56, 70, 43, -48, -21, -53, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 4,608 } };
const TfArray<1, float> quant7_scale = { 1, { 0.0038066951092332602, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -363, -1604, -685, -1273, 247, -592, 170, -1720, -1491, -740, 184, -1, -785, 276, -634, 206, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00011926815204787999, 0.00010386705980636179, 0.00010029858094640076, 8.5219369793776423e-05, 0.00011666138743748888, 0.00011170224752277136, 0.00011334272130625322, 9.5869661890901625e-05, 9.9505494290497154e-05, 9.3218695838004351e-05, 0.00011129624181194231, 0.00011487091978779063, 0.00010930603457381949, 0.00013486795069184154, 0.00013310022768564522, 0.00011576142424019054, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*3*8] = { 
  /* [0][0][][] */ 20,-8,45,48,-35,2,60,-11, -12,6,12,-11,-65,-18,79,-117, -16,48,-6,21,-127,-36,79,-65, 
  /* [1][0][][] */ -86,48,-71,10,3,-68,-3,58, -98,-64,-127,-52,107,35,82,93, 48,-31,-17,-122,7,-85,62,-42, 
  /* [2][0][][] */ -13,-20,-48,-42,-36,-62,-2,80, 91,-27,65,14,6,-105,-4,127, -59,-28,23,-91,-25,-31,77,25, 
  /* [3][0][][] */ 45,-127,-14,-51,85,-63,-81,64, 50,-100,-54,121,-16,-57,-55,91, -116,-35,-90,-43,103,-99,82,82, 
  /* [4][0][][] */ -76,-91,-127,-70,-91,-25,67,-28, -73,-20,-76,-32,-93,55,39,-57, 35,99,95,-2,-86,122,-72,-23, 
  /* [5][0][][] */ -105,86,65,77,1,-78,-48,60, -127,65,-5,-32,42,75,-59,-50, -112,124,29,66,-18,30,-38,36, 
  /* [6][0][][] */ 117,-56,25,66,-28,-20,-34,-38, 56,-81,49,-49,-5,30,-58,-13, -6,-127,-84,53,4,42,-98,-104, 
  /* [7][0][][] */ -88,15,-65,-123,-74,96,88,-17, -21,-29,-2,93,21,41,46,0, -37,-79,-127,-66,63,-43,112,-56, 
  /* [8][0][][] */ 46,-90,95,91,55,-30,40,37, -49,-117,-57,32,127,-43,-71,52, -33,-39,94,36,9,28,-43,-58, 
  /* [9][0][][] */ 9,-127,36,55,-77,74,57,94, -23,-64,-21,-54,-57,82,-20,36, -13,-57,-30,124,-91,93,-78,49, 
  /* [10][0][][] */ -127,-19,-21,63,13,-32,116,-39, -67,-105,-26,51,-97,-15,-23,-3, -69,-60,-51,43,-123,84,-27,92, 
  /* [11][0][][] */ -93,9,-37,127,110,21,-37,-102, -27,-74,22,9,72,-31,-18,8, 7,6,-44,33,-79,-61,-73,-43, 
  /* [12][0][][] */ -69,17,-77,122,-63,4,7,-46, 8,-71,-68,22,-120,70,-127,-41, 48,-8,55,65,75,-67,-93,34, 
  /* [13][0][][] */ 44,-3,12,-55,-93,58,-112,-7, 81,46,-2,-41,-110,-65,-127,-47, -26,42,82,-31,-11,-98,-96,109, 
  /* [14][0][][] */ 32,43,59,-31,-17,-27,4,-107, -6,67,73,36,-2,-54,4,-127, 67,-62,25,104,39,-111,-3,-103, 
  /* [15][0][][] */ 127,22,10,-63,4,-16,-57,64, 14,2,71,-71,-35,-60,-30,34, -16,-52,29,-95,-104,-66,-29,44, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0034453596454113722, 0.0030004603322595358, 0.0028973759617656469, 0.0024617752060294151, 0.0033700566273182631, 0.0032267994247376919, 0.0032741886097937822, 0.0027694355230778456, 0.0028744656592607498, 0.0026928556617349386, 0.0032150710467249155, 0.0033183344639837742, 0.0031575788743793964, 0.0038959989324212074, 0.0038449335843324661, 0.0033440589904785156, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[8] = { -898, -278, -896, -906, -786, -899, -650, -763, };
const TfArray<1, int> tensor_dimension10 = { 1, { 8 } };
const TfArray<8, float> quant10_scale = { 8, { 0.00018646333774086088, 0.00017873120668809861, 0.00015929673099890351, 0.00022050620464142412, 0.00017757467867340893, 0.00017654556722845882, 0.00018800279940478504, 0.00015526438073720783, } };
const TfArray<8, int> quant10_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[8*1*3*13] = { 
  /* [0][0][][] */ -24,-25,26,-22,-91,13,73,-38,-51,27,56,-75,66, -54,-127,49,-61,-50,42,-32,33,-12,36,56,-5,15, -3,-97,49,-97,-84,66,2,-49,28,13,40,-32,75, 
  /* [1][0][][] */ -127,-54,-74,34,-106,69,-72,70,-1,21,-53,-32,26, -43,84,-22,-42,-26,122,42,17,-36,-19,0,12,-33, -77,-26,-73,24,35,-88,-85,29,13,41,-41,-64,-31, 
  /* [2][0][][] */ 22,86,-72,-3,-70,-46,9,73,-28,-3,43,-73,42, -86,-99,-3,55,-95,57,-61,48,-24,-31,17,-7,-39, -27,-127,2,-76,-60,21,-123,54,77,-110,72,-43,-6, 
  /* [3][0][][] */ -25,-5,-4,-82,53,-48,47,11,59,-69,-9,-29,-51, 81,2,-4,49,11,28,-3,33,16,38,84,7,62, 127,-70,61,33,17,43,12,6,22,9,-62,-37,-106, 
  /* [4][0][][] */ 127,-87,-25,118,-67,15,-1,77,1,5,-68,29,39, 86,-82,32,15,-53,-62,-53,-31,-47,-44,-53,-56,-15, 21,3,61,15,-81,17,-45,-12,41,-13,-79,82,-26, 
  /* [5][0][][] */ -48,41,-8,39,67,-1,-40,-4,1,77,-9,53,19, 7,2,33,-37,55,-29,70,-13,7,79,-84,-33,-98, 2,27,-66,127,-49,74,43,-21,55,60,-15,-59,84, 
  /* [6][0][][] */ 50,86,-26,1,27,-27,-44,-44,-46,-47,-47,11,-20, -19,11,-58,-124,72,-8,-18,-56,6,-17,25,-12,-8, 80,32,11,-127,30,-63,9,-78,-34,22,-49,66,-45, 
  /* [7][0][][] */ 17,-17,75,73,49,31,-69,106,-7,-73,110,-44,83, -98,-47,43,70,80,-58,-11,17,20,-118,-15,74,-78, -17,46,82,109,-54,-80,34,67,-45,-127,29,13,-2, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 8,1,3,13 } };
const TfArray<8, float> quant11_scale = { 8, { 0.0040633096359670162, 0.0038948152214288712, 0.0034713093191385269, 0.004805153701454401, 0.0038696127012372017, 0.0038471866864711046, 0.0040968568064272404, 0.0033834385685622692, } };
const TfArray<8, int> quant11_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,150,13 } };
const TfArray<1, float> quant12_scale = { 1, { 0.045889522880315781, } };
const TfArray<1, int> quant12_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,150,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.034617040306329727, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,150,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.034617040306329727, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,75,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.034617040306329727, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,75,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.034617040306329727, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,75,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.022988105192780495, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,75,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.022988105192780495, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,38,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.022988105192780495, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,608 } };
const TfArray<1, float> quant20_scale = { 1, { 0.022988105192780495, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,4 } };
const TfArray<1, float> quant21_scale = { 1, { 0.06215905025601387, } };
const TfArray<1, int> quant21_zero = { 1, { 25 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,4 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,11,10 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,2 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,3 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,9,8 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,5 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,7,6 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1952), (TfLiteIntArray*)&g0::tensor_dimension0, 1950, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 2432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 312, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension12, 1950, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1952), (TfLiteIntArray*)&g0::tensor_dimension13, 1200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension14, 1200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1200), (TfLiteIntArray*)&g0::tensor_dimension15, 600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension16, 600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1200), (TfLiteIntArray*)&g0::tensor_dimension17, 1200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension18, 1200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1200), (TfLiteIntArray*)&g0::tensor_dimension19, 608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension20, 608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 608), (TfLiteIntArray*)&g0::tensor_dimension21, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension22, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[11] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[11] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 23, };
const size_t tflNodes_subgraph_index[] = {0, 11, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  22, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_3_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_3_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
