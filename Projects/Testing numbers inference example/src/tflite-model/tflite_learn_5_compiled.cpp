/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 04.06.2024 13:18:46

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 8
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 3200;
#else
constexpr int kTensorArenaSize = 2176;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,650 } };
const TfArray<1, float> quant0_scale = { 1, { 0.047929354012012482, } };
const TfArray<1, int> quant0_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 50, 13, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 50, 1, 8, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 25, 8, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 25, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[2] = { -1, 208, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(16) int32_t tensor_data6[17] = { -273, 106, 890, -1031, 959, -797, 654, 1438, -172, -1700, 47, 31, -455, -443, 864, 68, -577, };
const TfArray<1, int> tensor_dimension6 = { 1, { 17 } };
const TfArray<1, float> quant6_scale = { 1, { 0.00049660331569612026, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[17*208] = { 
  -45, -10, 13, 0, 23, -13, -30, -50, 20, 5, 5, 16, -28, -88, -103, -47, -45, -15, 2, 8, 21, -17, -27, -26, 20, 7, 10, 21, 25, -43, -7, -17, -21, -22, 14, 13, 26, -15, -18, 6, 13, 18, 18, 19, 1, -22, 15, 0, -7, -20, -3, 9, 20, -11, -51, 17, 13, 16, 2, 14, 20, -63, 20, 9, 1, -23, -50, -5, 27, 8, -29, 11, -12, 7, 6, 27, -1, -46, 10, 20, -7, -13, -45, -8, 28, -28, -8, 4, -62, -15, -23, 0, 13, 0, 8, 20, -2, -4, -10, -42, -4, -12, -9, 3, -71, -21, -42, -24, 14, 5, 19, 18, 5, -13, -38, -58, -25, 1, -36, 23, -87, -52, -63, -3, -4, 6, 7, 38, 4, -20, 10, -49, -34, 2, -29, 14, -47, -40, -60, 19, 8, 10, -15, 46, 12, 3, -5, -29, -21, -19, -19, -5, -16, -13, -70, 10, 14, 7, -21, 7, 16, -2, -27, -35, -56, -53, -18, -5, -27, 19, -66, 8, 13, 15, -24, -83, 17, -9, -40, -17, -31, -50, -16, -11, -29, 5, -103, 26, 11, 11, -36, -76, 31, -4, -44, 3, -94, -38, -5, 5, -26, -14, -90, -19, -4, 16, -26, -39, 
  5, 14, 25, 17, 8, 17, 15, 29, 14, -11, -57, 22, -38, -27, 17, 34, 17, 18, 12, -35, 7, 4, -13, 25, -22, 3, -46, -13, -16, -13, 14, 17, 23, 0, -5, -13, -3, 6, -2, 14, 26, 10, -8, -13, 13, -7, 12, -1, 18, 18, 5, -26, -21, -6, -26, 8, 24, 7, -2, -34, -21, 3, 12, 2, 12, 19, 10, -23, -25, -12, 3, 6, 1, 1, -2, -40, -38, 21, -1, -6, -14, 6, 14, -19, -5, -18, -36, 10, -5, -13, 13, -44, -23, 12, -14, -3, 8, 2, 10, -27, 21, -9, -29, 0, -1, -14, 2, -37, 3, 10, -5, 12, -3, -8, 29, -22, -8, 13, 2, -6, -18, 2, 48, -59, -15, 14, -10, 10, -17, 2, -12, -15, 28, -19, 1, -36, -2, 8, 3, -39, -25, 5, -36, 5, -37, 9, -29, -18, 6, -26, -8, -9, -4, 2, -55, -47, -18, 4, -40, -4, -24, -5, -28, 9, 6, -32, -7, -28, -12, 15, -72, -66, -44, 7, -57, -18, -44, -2, -76, 5, 4, -31, -4, 10, 3, -3, -101, -66, -38, 3, -64, -35, -43, -14, -51, -18, -2, -49, 4, -11, 0, -17, -73, -34, -29, -3, -46, -14, 
  -28, 4, 19, 9, -65, -31, 30, -23, 9, 18, 13, 23, 18, -18, 0, -1, -54, 15, -5, 15, 13, -11, 20, -14, 15, 21, 17, 16, 26, 7, 10, 28, -47, 15, 6, 6, 25, -5, 19, -24, 9, 21, 16, 11, -28, -78, 9, 18, -19, 7, 1, -6, 17, -13, -76, -31, 13, 5, 16, 8, 0, -21, -12, 9, -15, 3, -8, -9, 26, -12, -32, -38, 6, -9, 13, -45, 4, -5, -20, -2, -14, 5, -8, -51, 11, 18, -30, -40, -23, -41, -11, -52, 8, -12, 8, 26, -11, 6, -26, -85, -3, 3, -23, -21, -37, -48, -14, -25, 20, -1, 6, -4, -1, -4, 17, -69, -26, 6, -14, 2, -69, -27, -39, -21, 14, 3, -4, 2, 8, -34, -19, -69, -34, 15, -13, 10, -33, 0, -46, 28, 22, 2, 12, -46, -2, -33, 48, -23, -20, 25, -36, -20, -30, -10, 52, 12, 23, -2, 15, -8, 14, -30, 43, -40, -17, 18, -38, -12, -6, -44, -7, 15, 22, -4, 24, -20, 0, -29, -10, -35, -13, 5, -17, -15, 20, -21, -1, 45, 30, -1, 15, 29, 6, -28, -1, -22, -64, 1, -2, 11, 23, -31, -29, 45, 20, 4, 14, -32, 
  22, -31, -89, 1, 11, -22, 9, 21, 14, 26, 32, 9, 16, -40, -23, -41, 21, -21, -18, 9, 14, 11, 8, 11, 18, 20, 14, 11, 21, 17, -51, -11, 30, -7, 3, 18, 14, 26, -2, 1, 4, 16, 3, 6, 12, -70, -49, 3, 10, 1, 3, 10, -7, 28, -18, 6, -5, 17, 1, 7, -9, 7, -49, -5, 16, -5, -5, 18, 0, 25, -29, -12, -6, 8, 1, 12, -5, 33, -45, 2, 1, -4, 14, 22, 4, 26, -86, -18, -3, -28, -6, -10, 4, 22, -34, 10, 14, -8, 13, 23, -38, 35, -53, -66, -2, -88, -26, 14, 13, 3, -20, 10, 8, -9, 38, 24, -32, 33, -37, -38, -20, -68, -47, 16, 1, -2, -14, 9, 5, -12, 49, 5, -10, 25, -27, -44, -3, -39, 18, 11, 1, 12, -18, 2, 7, -1, -16, -24, -13, 0, -42, -10, -23, -31, -31, -21, 9, 6, -9, 9, 8, 4, -19, -44, -17, -6, -28, -17, -47, -28, -5, -19, 20, 3, 18, -17, 11, -15, -26, -40, -14, -15, -8, 0, -62, -29, -43, 9, 22, 1, 8, -8, 22, -6, -23, -7, 10, -18, -5, -10, -11, -16, -17, -9, 1, 1, 14, -27, 
  6, -37, -38, -20, -6, 4, 17, 28, -21, 2, -39, -2, -18, -7, 29, 37, -7, -75, -58, -26, -11, 9, 16, 10, -27, 15, -58, 20, -1, -33, 14, 21, 15, -47, -66, -37, 1, -7, 22, 11, -36, 27, -14, 9, -4, -11, 12, 11, 8, -24, -81, -30, 9, 1, 4, 6, -22, 10, -5, 14, 8, -18, 14, 10, 12, -5, -36, -43, 10, 18, -20, 12, -33, 0, -12, -7, -15, 29, 9, 37, 7, -17, -57, -48, 28, 24, -53, 1, -37, 2, -1, -3, -26, 29, 18, 37, 8, 0, -25, -59, 31, 17, -36, 29, -45, -26, -12, -5, 0, 3, 24, 29, 15, -9, -33, -47, 25, 13, -30, 32, -40, -20, -39, -20, -12, 6, 19, 34, 8, 1, -6, -29, 9, 3, -34, 44, -27, -18, -11, -11, -25, 0, 8, 0, -9, 15, 18, -16, 6, 5, -16, -12, -18, -9, -6, -19, -23, -5, -58, -23, -13, 7, 35, -17, -48, 23, -30, -41, -2, 11, -20, -15, -20, -8, -46, 4, -18, 9, 28, -23, -55, -1, -29, -48, 23, 18, -15, -14, -22, -9, -62, -9, -20, 17, 33, -19, -1, 4, -17, -26, 10, 8, -17, 0, -39, -7, -49, -6, 
  25, -18, -31, -10, 7, -21, 9, 43, 6, -14, -53, -15, 0, 4, 18, 21, 22, -19, -12, -17, -14, -12, 0, 19, 17, 18, -61, -30, 26, -16, 11, -1, 14, -67, -76, -7, -26, -12, 10, 8, 6, -5, -72, 17, 17, 18, 9, -15, 11, -57, -30, 21, 5, -8, -43, 3, 35, -21, -10, 27, -3, 23, 16, -14, 23, -2, -12, 11, 1, -17, -13, 8, 20, -6, 0, 19, 14, -14, 14, -21, 9, 2, -10, -3, 3, -15, -43, 7, 10, -9, -9, 25, 9, 4, 3, -47, -5, -3, -14, -1, 4, -2, -35, -3, -6, -25, -30, 22, -20, 13, 0, -61, -5, -4, -19, 0, -3, -3, -7, 27, -5, -3, -31, 6, -16, 10, -14, -61, -33, 11, -15, 10, 19, -30, -18, -29, -4, -16, 29, -2, -8, 10, -24, -32, -38, 19, -3, 8, -34, -39, -16, -27, -7, -26, -38, -8, -26, 6, -40, -33, -39, 26, 8, 25, -9, -10, -1, -31, -40, -23, 21, -31, -27, 4, -28, 33, -12, 25, -3, 23, -46, -14, -3, 2, -36, -42, 21, -64, -50, 9, -52, 22, -17, 31, 9, 22, -36, -28, 13, -8, -15, -23, -67, -65, -76, 14, -68, -16, 
  -29, 1, -20, 5, -11, -7, 21, -48, 4, 20, -20, 23, 13, -33, -16, -18, -21, -8, 14, 16, -14, 5, 8, -57, 7, 5, -22, 12, 17, 14, -17, -8, -30, -3, 6, 9, -9, 5, 18, -22, 6, 25, -21, 0, 39, -15, -10, -20, -6, -19, 2, 0, -2, 0, 7, -55, 8, 16, -29, 6, 30, 34, -15, -14, -11, -20, -3, 5, -18, 6, 6, -56, 9, 18, -35, 29, 24, 9, -30, -13, 0, -18, 0, -23, 7, 19, -2, -38, -18, 7, -53, 8, 28, -4, -33, -49, 11, -9, -29, -8, -8, 36, -4, -36, 2, -5, -99, 14, 14, -14, -33, -63, 7, 0, -26, -11, 7, 34, -3, -2, -5, 8, -50, -13, 1, -2, -24, -86, 8, 21, -49, -15, 11, 37, -10, 5, -8, -8, -57, -39, 3, 3, -5, -31, 13, 24, -55, 0, 9, 18, -1, 36, -56, -8, -39, -41, 12, 10, 10, -11, 16, 32, -59, -16, 18, 22, -18, 24, -62, -26, -19, -12, 15, 7, 32, -6, 25, 28, -49, -21, 25, 5, -43, 2, -36, -38, -53, -11, 13, 12, 19, -19, 6, 36, -24, -27, -24, 12, -8, -7, -7, 21, -26, -10, 13, 13, 13, -46, 
  -43, -44, -44, 6, 1, -16, 28, -3, 15, 29, 2, 11, 1, -27, 4, -7, -22, -53, -84, 8, 2, -51, 24, -4, 14, 17, -7, -9, -14, 11, -5, -37, -30, -5, -1, -17, 5, -35, 35, -14, -10, 13, 11, -30, -11, -35, -15, -47, -23, 10, 10, -23, 0, -2, -4, -5, -6, 4, 3, -28, -28, -40, -19, -11, -14, 11, 10, -12, -16, 3, -19, -22, -20, -2, 9, -34, -27, 22, -31, -7, -13, 12, 13, -4, -22, -12, -10, -23, -24, -20, 15, -47, -20, 44, -45, 8, 1, 18, 18, 7, 5, 1, -5, -5, -17, -35, 12, -20, -18, 32, -35, 12, 2, 11, 34, 0, 13, -1, -14, -59, -45, -32, 10, -40, -20, 25, -41, -2, 10, 17, 4, 16, -33, -4, -1, -42, -35, -23, 53, 28, -25, 23, -21, 24, 13, 17, 45, 17, -19, 2, -11, -48, -7, -31, 50, -6, -14, 22, -5, 42, 15, 23, 6, 34, -35, -9, 1, -35, 2, -23, -39, 17, -18, 16, -9, 16, 22, 24, -26, 36, -46, -23, -4, -19, 43, -27, -11, 34, -10, 24, 3, -35, 20, 22, -24, 52, 10, -6, 14, -17, -8, -31, -11, 24, -22, 24, 17, -11, 
  7, -10, -7, 10, -16, 9, -52, -25, 6, -33, -32, 30, -3, -35, 2, 9, -22, 17, 16, 17, -66, 9, -34, -27, 0, -47, -9, 13, 14, -18, -6, 11, -23, 16, 16, 21, -31, 8, -25, -43, 6, 0, -2, 5, 20, -54, -41, -10, -53, 12, 13, 19, -13, 23, 32, -33, 10, 10, 4, 9, 14, -27, -16, -20, -20, 7, 11, 21, -4, 4, 28, -31, 3, 24, -14, 1, 5, -11, -33, -12, -5, -12, 14, 37, 22, 16, 4, -5, -7, 5, -27, -5, -4, -5, -33, -10, 24, -12, 3, 17, 9, 19, -15, 11, -27, -4, -63, -45, 8, 7, -22, -6, 13, -19, -14, -50, -3, -8, -8, -18, -19, -29, -16, 6, 11, 5, -37, -127, 19, 2, 37, -48, 14, -12, 0, 0, -38, -23, -43, -55, 1, 8, -24, -63, 25, 11, -1, -48, 21, -8, -25, 11, -27, -32, 51, -59, 12, 3, -20, -66, 25, 16, -26, -50, 44, -30, -25, 8, -62, -1, 18, -68, 8, 2, 2, -33, 23, 10, 20, -34, 39, -20, -31, 9, -30, -23, -49, -40, 12, 7, -5, -69, 16, 16, 30, -39, 48, -40, 12, -4, 22, -32, 21, -30, 6, 14, 15, 26, 
  8, 32, 29, 15, 37, -4, -9, 17, 22, 18, 15, -18, -36, -45, 0, 9, 13, 3, 21, -11, 26, -25, -19, 20, 22, 8, -12, -13, 16, -31, 5, -22, 19, -14, 1, 26, 9, 4, 6, 14, -19, 2, -24, 13, 27, -36, 2, -53, 6, 2, 20, 17, -5, 19, 13, 10, 1, -12, -9, 14, 9, -31, 5, -27, 13, 20, 16, 4, -14, 7, -30, 4, 2, -41, -5, 6, -2, -45, -4, -7, -15, 4, 13, 8, -32, 10, 1, -1, -24, -17, 12, -11, -12, 8, -13, 14, -8, 7, 33, 1, -12, 21, -19, -22, -29, -23, 5, 3, -9, 13, -9, 13, -9, -1, 21, 5, -20, 16, -14, -45, -16, -23, 24, 15, -20, 15, -15, 23, -15, -6, -4, 13, -16, 23, -8, -51, -6, -22, 42, -3, -39, 15, -31, 27, -14, 3, 4, 19, -31, -3, -10, -30, -16, -28, 60, -19, -39, 13, -26, 18, -6, -4, 8, 25, -30, -26, 5, -23, 1, -22, 68, -27, -28, 6, -16, -10, -23, -3, 6, 19, -35, -59, 17, -38, -1, -30, 72, -55, -21, 9, 2, 16, -3, -21, -23, 22, -20, -100, 25, 40, -18, 15, 30, -30, -39, 18, 26, 34, 
  37, -5, -49, -58, 22, 7, -78, -2, -60, -51, -105, -93, 2, 16, -19, -67, 8, -23, -52, -90, -22, -80, -1, 29, -90, -16, -107, -109, -16, 50, 18, -63, -41, 0, -18, -15, -20, -21, -27, -24, -52, -37, -38, -1, -54, -20, 6, 9, -17, -44, -43, -34, -11, -28, -16, 3, -80, 5, -16, -11, -44, -43, 3, 13, -32, 9, -22, -41, -28, -62, -43, 0, 16, 21, -3, -46, -21, -33, -6, -9, -14, 4, -14, -21, -21, -78, 24, -3, 21, 24, 7, 0, -15, -49, 6, -37, -23, -6, -31, 14, -17, -75, 13, 13, 27, 19, 3, 3, -7, -42, -10, -98, -4, 4, -15, 3, -22, -46, 3, 2, 11, 22, -38, 4, 10, -19, -10, -44, 9, 3, -2, 3, -28, 9, 6, 7, 23, 21, -34, 1, 19, -15, 2, -5, -6, 1, -7, 14, 9, 8, -16, -5, -1, 16, -23, 4, 2, -12, -1, 9, 13, 20, -18, 0, -2, 21, -2, -13, -18, -2, -56, -8, 19, -5, 16, 9, 18, 13, -1, -40, 0, 39, -21, -13, -27, -8, -69, -18, 23, -7, 15, 28, 9, -2, 19, -41, -24, 18, -52, 0, -17, -5, -21, -10, 7, -16, 0, 6, 
  19, -7, -1, 9, -15, -4, 17, -3, 5, -17, -52, -55, 18, 18, -10, -54, -3, 13, -28, -1, -19, -25, 6, -9, 2, 19, -19, -14, -65, -36, -64, -30, -43, 22, -12, -31, -16, -29, -35, -25, -4, 4, 10, -64, 4, -7, -52, -22, -25, 0, 5, -31, -22, -17, 26, 0, -23, -38, -87, -78, -17, 31, 14, -14, -14, -16, -24, -25, -37, -13, -3, -8, -25, -20, -54, -16, 19, 3, 4, -63, 13, -8, -7, 25, -43, -7, -2, -14, 19, -18, 1, 6, 1, -35, -8, -26, -32, 1, 2, 14, 9, 6, -30, -11, 3, -19, 10, -2, -8, -72, -15, -19, -33, 18, 1, 6, 24, -9, -80, 10, 1, -34, -18, 4, -2, -33, 6, 12, 12, 20, -6, -14, 18, 0, -38, 31, -13, -32, 10, -15, 9, -22, 43, -18, 21, 16, 5, -4, 30, 23, -30, 40, 12, -14, 13, 35, -7, -41, 35, 26, 17, -29, -5, 23, 4, -14, -35, 48, 8, 0, -11, 48, 15, -35, 27, 18, 27, -35, 1, 20, 41, 7, -22, 41, 22, -7, 13, 42, 19, -23, 29, -6, 19, -12, 9, 26, 0, -2, -1, 41, 26, 5, -2, 21, 22, -19, 42, -22, 
  -7, 31, 27, 42, -49, -7, -17, -18, -4, -12, -14, -30, -26, 6, -42, -97, 1, 10, 20, 23, -47, 11, -62, -25, 8, -9, -3, -17, -9, -37, -53, -22, 9, 13, 26, 22, -43, 0, -62, -32, 20, 0, -1, -6, -59, -33, -75, -26, 14, 11, -17, -14, -19, -27, 9, -8, 3, 6, -36, -26, -13, -3, 7, -26, -56, -33, -23, -35, -8, -18, 6, 12, -17, -13, -37, -4, 3, -19, 18, 32, -24, -59, -34, -40, 3, -16, -36, 7, -58, -28, -13, 0, -2, -5, 34, 35, -7, -45, -34, -19, -38, -45, -10, 13, -33, -25, -73, -2, -24, -18, 45, 33, 1, -37, -30, -14, -13, -43, 13, -1, -1, 6, -76, -9, -5, -27, 42, 13, 13, -66, -19, -24, 5, -38, 12, 13, -9, 19, -38, 6, 7, -35, 25, -26, -4, -17, 0, -62, 3, 11, 2, 17, -19, 1, -32, -3, -4, -37, 0, -30, 6, -40, 6, -57, 37, 19, 7, 1, -36, 5, -18, 22, 14, -26, -37, -26, -13, -45, -22, -63, 32, 33, -59, -8, -42, -16, -14, -10, 8, -26, -41, -29, -7, -23, -21, -32, -18, 40, -67, 11, -18, -23, -35, -23, 22, -26, -23, -17, 
  -38, 34, 11, 4, -100, 23, -94, 7, -58, -70, 29, -81, -67, 33, -65, -34, -36, 28, 21, -9, 13, -6, -74, -37, -25, -51, -9, -63, -16, 18, -18, 23, 23, -11, -32, -50, -23, -27, -40, 18, -49, -16, -103, -22, -27, 33, 16, -23, -7, -10, 52, 21, -45, 28, -73, 5, 38, -19, -42, 16, -21, -31, -12, -15, -76, -20, -12, 4, -28, -13, -53, -11, 2, -18, -43, -2, -29, -34, -48, -5, -79, -39, -25, 0, 16, -13, 7, -45, 7, 4, -31, -18, 5, -56, -18, 6, -23, -43, -43, 6, 6, -59, 26, -31, 15, 15, -16, 2, -30, -65, -18, -37, 16, -26, -48, 9, 4, -27, 14, 11, 5, 15, -16, -16, -2, -43, -2, -50, -12, -45, 3, 18, -9, -18, 13, -16, 21, 2, -40, 24, -7, -15, 16, -19, 13, -30, -6, 1, -16, -21, 15, -1, 35, 21, -78, -12, 24, -55, 3, -40, 18, 8, -29, -1, 0, 0, 26, 11, 23, 33, -58, 2, 21, -9, -8, -62, 16, 1, -24, -18, 19, 18, 18, -7, 0, 24, -66, -13, 17, 0, 13, -14, 6, 7, -26, -25, -45, -1, 12, -12, -1, 25, -72, -19, 15, -15, -11, -12, 
  10, -125, -46, -46, -31, -63, 26, -73, -47, -32, -102, -24, 17, 12, 13, -24, 3, 22, -20, -34, -33, -36, -13, 23, -80, -9, 16, -34, -67, -48, 15, -23, -74, 41, 8, -3, -46, -38, -39, 3, 14, -9, -36, -77, -70, -25, -1, -32, -59, 23, -14, -41, -42, -73, 34, -44, -12, 15, -16, -35, -47, -72, -16, -33, -19, 23, 17, -18, -35, -13, 15, 9, -11, 11, 19, -19, -21, -76, -29, -29, 13, 17, 18, 5, -3, 17, -39, 1, 14, 2, 18, -17, -21, -88, -1, 12, -27, 23, 15, 5, -10, 9, -6, -34, -5, -2, 23, -4, 4, -11, -33, 14, -1, 25, 23, -12, -9, 28, 9, -67, -3, -2, 15, -33, 15, 23, -12, 11, -11, -17, -5, -4, -53, -35, 13, -56, -29, 1, -77, 3, -5, 24, -11, -24, -12, -41, 11, -21, -16, 34, 0, -23, -15, 2, 1, -19, -5, 0, 4, 40, -31, -27, 14, -68, -39, 27, -14, -38, -31, -12, -34, -12, -16, -4, -13, 42, -42, -17, 2, -51, -39, 2, -43, -27, -93, -109, -32, -28, -1, -1, -9, 9, -33, -21, -36, -14, -47, -19, -24, -8, -55, -46, -15, -10, -12, -10, -17, 2, 
  -50, 4, 7, -23, -29, 42, -63, -7, -13, -27, -15, -24, -58, -25, -48, -60, -64, -2, -36, 6, 1, -11, -57, -59, -21, -53, -50, -42, -47, -16, 3, 13, 0, -1, 26, -4, 0, 16, -22, -14, -18, -78, -41, 7, -21, -29, 7, 12, 5, -35, -40, -39, 5, -12, -42, 9, -54, -18, -48, -48, 29, 12, 17, 8, 39, -36, -18, -1, 14, -33, 31, 15, 3, 1, -72, -7, 31, 8, 3, -68, 18, -33, -45, -7, -3, -95, 31, 6, 15, 14, -76, -25, 8, -7, -13, -97, 27, -7, -38, 8, -23, -97, 10, 1, 11, 27, -84, -30, 6, -17, 7, -116, 1, -41, -21, 3, -16, -66, 3, 13, 4, 30, -65, -10, 21, -9, -20, -72, -25, -19, 3, -2, -55, -51, 7, -3, 8, 19, -35, 11, -6, -82, -11, -32, -30, -30, 1, -21, -6, -22, -14, -1, -1, 36, 3, 10, -10, -37, 3, 13, -53, -7, 25, -20, -20, 3, -13, -10, -2, 16, 18, 37, -38, -71, -14, 24, -77, 2, 25, 22, -27, 6, -8, -17, 3, -1, 21, 22, -55, -66, -30, 18, -51, 5, 36, 20, 26, -2, -45, -7, 21, -1, 17, 32, -59, -89, -43, 30, 
  -56, -19, -40, -19, -25, -20, -22, -29, -30, -34, -88, -55, 5, 19, -34, -44, 25, -82, -70, -13, 1, -36, 1, -53, -29, -26, -44, -8, 10, -16, -10, -107, 5, -73, -36, -71, -1, -25, -46, 15, -70, -32, -55, -62, 25, 9, 6, -57, 2, -28, -40, -67, -3, -21, -27, 18, -63, -10, -30, -2, -4, -8, 9, -22, 11, 9, 32, 22, -16, 12, -53, 5, -5, -13, -9, 8, -1, -28, -9, -35, 2, 18, 18, 3, -20, -3, -24, 12, 10, 12, 5, 5, -13, -33, -30, -40, -37, 14, 9, 2, -40, -8, 5, 6, 9, 19, 17, 0, -47, -47, -33, 8, -36, 10, 8, 16, -10, -38, 9, -10, 25, 2, 16, -11, -41, -81, -15, -3, -13, 25, -2, 8, -8, 11, 2, -1, 13, -5, 25, -5, -7, -40, -40, 10, -17, 11, -39, 12, -53, 3, -1, -16, 14, 5, -57, -2, 15, -3, 23, -27, -22, -58, -55, 10, -17, -32, 16, -36, 14, 10, -97, -4, -12, -14, 22, -44, -29, -38, -20, -4, -37, 10, 16, -16, 5, 8, -91, -19, -19, -50, 9, -61, -10, -20, -41, -25, -35, 19, 20, -20, 4, -3, -75, -22, -22, -28, 1, -7, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 17,208 } };
const TfArray<1, float> quant7_scale = { 1, { 0.013209563679993153, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { -1399, -1388, -923, -2249, -2370, 996, -3633, -4546, -2640, -2636, -998, 914, 1260, 524, -2513, -292, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.0003980048350058496, 0.00020028410654049367, 0.00034685860737226903, 0.00026386612444184721, 0.00026847230037674308, 0.00042193496483378112, 0.00018433404329698533, 0.00026294702547602355, 0.00032508291769772768, 0.00023616936232428998, 0.0003659779904410243, 0.0002089102054014802, 0.0002252960839541629, 0.00027403363492339849, 0.00024441711138933897, 0.00024682542425580323, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*3*8] = { 
  /* [0][0][][] */ 8,47,13,8,-53,-11,-16,-15, 3,-12,-13,10,-127,8,-1,-1, 8,54,-25,7,-45,23,22,1, 
  /* [1][0][][] */ 32,1,-13,-67,-52,-16,-15,114, 28,3,-5,-46,-21,-11,-4,-35, 37,-3,12,-38,-44,-31,2,127, 
  /* [2][0][][] */ -33,-90,-1,5,-5,-67,-57,-44, -90,-94,-3,10,20,-127,-43,92, -55,-57,-4,-35,13,-23,4,-1, 
  /* [3][0][][] */ 62,-48,-18,-22,103,-122,-21,-8, -19,-29,-10,-6,-16,-127,-62,-16, 39,-49,-28,2,49,-51,0,56, 
  /* [4][0][][] */ -125,4,-56,-127,8,-41,95,-19, -41,-13,-39,-127,-51,-1,0,-10, -12,65,-9,-84,-68,41,27,-17, 
  /* [5][0][][] */ -60,9,-7,-29,40,-85,-33,-8, -59,0,10,-56,19,-98,-127,-2, -43,8,20,-32,2,-24,-83,19, 
  /* [6][0][][] */ 124,-101,56,83,-8,-25,-44,-35, 34,-127,-4,49,7,62,-19,-48, 29,-103,16,26,15,9,24,-57, 
  /* [7][0][][] */ -26,35,54,-25,-55,127,-15,-93, -21,26,-9,-4,-31,14,-24,-56, -8,24,-11,-31,10,34,41,1, 
  /* [8][0][][] */ -1,-59,-84,16,23,-107,56,15, -6,-107,-83,25,38,-127,18,13, 9,-48,-38,28,6,-5,45,-17, 
  /* [9][0][][] */ 9,-58,-118,127,-37,49,-9,18, 17,-97,-70,-28,-30,63,0,-9, -5,-90,-74,32,8,13,75,9, 
  /* [10][0][][] */ -127,-45,-46,-25,-13,0,-3,-8, -109,-59,-29,-22,-19,13,53,-9, -32,-27,6,-74,-15,37,-1,64, 
  /* [11][0][][] */ -95,18,33,-4,-14,-35,-46,-72, -78,-66,-3,4,127,-48,-18,-107, -100,-72,-24,19,49,-23,-16,-59, 
  /* [12][0][][] */ -58,57,-15,24,-127,4,52,-123, -78,-16,1,-13,-47,-8,-59,-75, -45,52,4,105,-24,-16,-105,-102, 
  /* [13][0][][] */ 23,-14,-44,-9,-79,-96,-83,-31, 71,24,-6,-52,-127,-29,-58,-27, 33,17,-4,-42,-65,9,-59,7, 
  /* [14][0][][] */ -9,18,127,-48,-31,32,10,-26, 14,16,-16,23,-40,17,-7,-37, 3,-8,105,-5,-5,-8,-22,1, 
  /* [15][0][][] */ -49,-75,84,-90,-9,-80,-11,60, -52,-74,-13,-122,0,-80,-58,-13, -5,-52,127,-67,4,-46,-82,-13, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0083541357889771461, 0.0042039705440402031, 0.0072805746458470821, 0.005538559053093195, 0.0056352429091930389, 0.0088564297184348106, 0.0038691782392561436, 0.0055192676372826099, 0.0068235020153224468, 0.0049572032876312733, 0.007681890856474638, 0.0043850326910614967, 0.0047289729118347168, 0.0057519758120179176, 0.0051303235813975334, 0.0051808743737637997, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[8] = { -5667, -4087, -4144, -3453, -3375, -5028, -4544, -3441, };
const TfArray<1, int> tensor_dimension10 = { 1, { 8 } };
const TfArray<8, float> quant10_scale = { 8, { 0.00017202520393766463, 0.00020023083197884262, 0.00023451336892321706, 0.00025434920098632574, 0.00023158654221333563, 0.00018311096937395632, 0.0001864153309725225, 0.00022555985196959227, } };
const TfArray<8, int> quant10_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[8*1*3*13] = { 
  /* [0][0][][] */ -60,-46,113,-75,78,72,15,-14,-83,-106,-37,87,23, 21,-106,75,-90,9,63,21,-22,-49,-43,-9,57,89, 70,-127,16,-89,-4,66,32,27,-21,-50,6,125,48, 
  /* [1][0][][] */ -76,50,-19,-94,3,99,95,38,-16,18,-60,-49,-60, -54,83,-53,-117,14,102,111,-6,-38,3,-41,-74,-30, -55,78,-63,-127,50,90,52,30,44,8,-84,-39,-52, 
  /* [2][0][][] */ 6,107,84,-100,-127,-25,61,65,8,-11,-17,19,25, 19,60,74,-64,-106,-39,79,46,19,3,-11,37,-16, 17,29,-4,-56,-108,-22,53,44,9,3,-1,28,-11, 
  /* [3][0][][] */ 74,-127,45,-41,-49,34,25,-1,42,-19,19,-7,16, 93,-111,8,9,-28,12,5,-13,42,-13,62,-22,31, 89,-38,30,0,42,26,19,-4,13,-8,0,-89,10, 
  /* [4][0][][] */ 32,-68,63,102,-12,-95,2,127,25,-58,-32,32,3, 33,-41,59,54,-34,-102,-26,49,-13,-25,-14,15,21, 14,-19,25,68,-39,-95,-22,73,28,-29,8,36,20, 
  /* [5][0][][] */ 82,18,-114,-113,-18,115,21,-48,-13,58,38,29,23, 87,29,-94,-127,4,54,-18,-97,-24,86,65,33,-29, 50,54,-60,-84,39,113,-1,-68,22,59,-9,-34,41, 
  /* [6][0][][] */ 73,61,50,47,120,45,-127,-109,29,3,-13,-46,63, 60,72,-29,-51,60,66,-99,-113,86,43,-58,-31,14, 50,76,-12,-59,122,49,-78,-111,42,43,-58,-27,37, 
  /* [7][0][][] */ 55,63,127,53,60,53,-7,-63,-65,-46,34,7,-23, -4,41,124,71,49,44,-8,-43,-88,-67,10,-1,-37, -3,102,91,74,58,21,-12,-9,-97,-48,16,-14,-15, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 8,1,3,13 } };
const TfArray<8, float> quant11_scale = { 8, { 0.0035891409497708082, 0.0041776243597269058, 0.0048928963951766491, 0.0053067519329488277, 0.0048318309709429741, 0.0038204346783459187, 0.0038893772289156914, 0.0047060898505151272, } };
const TfArray<8, int> quant11_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,50,13 } };
const TfArray<1, float> quant12_scale = { 1, { 0.047929354012012482, } };
const TfArray<1, int> quant12_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,50,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.047641653567552567, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,50,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.047641653567552567, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,25,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.047641653567552567, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,25,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.047641653567552567, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,25,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.037594225257635117, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.037594225257635117, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,13,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.037594225257635117, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,208 } };
const TfArray<1, float> quant20_scale = { 1, { 0.037594225257635117, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,17 } };
const TfArray<1, float> quant21_scale = { 1, { 0.2899000346660614, } };
const TfArray<1, int> quant21_zero = { 1, { 61 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,17 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,11,10 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,2 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,3 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,9,8 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,5 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,7,6 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 656), (TfLiteIntArray*)&g0::tensor_dimension0, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 68, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 3536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 312, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension12, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 656), (TfLiteIntArray*)&g0::tensor_dimension13, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension14, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 400), (TfLiteIntArray*)&g0::tensor_dimension15, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension16, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 400), (TfLiteIntArray*)&g0::tensor_dimension17, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension18, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 400), (TfLiteIntArray*)&g0::tensor_dimension19, 208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension20, 208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 208), (TfLiteIntArray*)&g0::tensor_dimension21, 17, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension22, 17, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[11] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[11] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_CONV_2D, OP_RESHAPE, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 23, };
const size_t tflNodes_subgraph_index[] = {0, 11, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  22, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
